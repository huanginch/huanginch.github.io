<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS排版: Flex(2)</title>
    <url>/2022/05/25/CSS-Flex-2/</url>
    <content><![CDATA[<p>此文章為觀看<a href="https://youtu.be/88ymaHaStoQ">六角學院CSS Flex 超詳解，彈性版型任你操控！</a>影片後整理之筆記。<br><br><a href="https://huanginch.github.io/2022/05/24/CSS-FLEX-1/">上一篇</a>介紹了外容器和內容器的語法，這篇會來示範一些例子。</p>
<h2 id="Chrome-開發者工具"><a href="#Chrome-開發者工具" class="headerlink" title="Chrome 開發者工具"></a>Chrome 開發者工具</h2><p>在介紹例子之前，先來介紹chrome內建的好用工具，假如你在你的專案上用到了flex語法，可以f12打開開發者工具，在style的地方找到你撰寫display:flex的地方，你會發現有個圖案(如圖1)，按下去之後你會看到許多在上一篇出現的語法(如圖2)，點擊這些按鈕你可以即時預覽各種語法在你的網頁上呈現的效果。<br><img src="/../images/pasted-47.png"></p>
<p><img src="/../images/pasted-48.png"></p>
<h2 id="flex實例"><a href="#flex實例" class="headerlink" title="flex實例"></a>flex實例</h2><h3 id="圖片文字交錯"><a href="#圖片文字交錯" class="headerlink" title="圖片文字交錯"></a>圖片文字交錯</h3><p><img src="/../images/pasted-49.png"></p>
<ul>
<li><p>這題的重點在於要善用內容器語法，先把所有內容器設成一致(文字左，圖片右)，一來方便管理，二來在做RWD時會方便許多。</p>
</li>
<li><p>程式碼如下</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/ExQbYrQ?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
See the Pen <a href="https://codepen.io/intHuang/pen/ExQbYrQ">
Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
on <a href="https://codepen.io">CodePen</a>.
</iframe>
</li>
<li><p>仔細看第二個元素，我使用了<code>flex-direction: row-reverse;</code></p>
</li>
</ul>
<h3 id="相簿式排版"><a href="#相簿式排版" class="headerlink" title="相簿式排版"></a>相簿式排版</h3><p><img src="/../images/pasted-51.png"></p>
<ul>
<li>這題相對簡單，簡單來說把大張圖片和三張小張圖片切割成兩個容器，小張圖片再使用flex-direction改成垂直方向。</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="相簿式排版-使用flex" src="https://codepen.io/intHuang/embed/NWywKVN?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/NWywKVN">
  相簿式排版-使用flex</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<ul>
<li>要注意一點，為了避免圖片因排版而被擠壓變形，這裡使用了<code>object-fit:cover;</code></li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>影片內容差不多就這些，老師講的很淺顯易懂，算是對我幫助很大，如果有哪裡不懂也推薦大家去看老師影片。</p>
]]></content>
      <categories>
        <category>css flex</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css-flex</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: BEM</title>
    <url>/2022/09/02/CSS-BEM/</url>
    <content><![CDATA[<p>BEM命名法(Block-Element-Modifier)是一種CSS class的命名方式，和OOCSS以及SMACSS相同，都是為了讓css更結構化、更具可讀性。</p>
<h2 id="Block、Element、Modifier"><a href="#Block、Element、Modifier" class="headerlink" title="Block、Element、Modifier"></a>Block、Element、Modifier</h2><ul>
<li><p>Block指的是區塊，一般來說我們都會把網頁切分成很多區塊，並以語意化的方式幫他命名，ex: menu、navbar等等。</p>
</li>
<li><p>Element指的是區塊內的元素，比如說navbar裡的item。</p>
</li>
<li><p>Modifier指的是修飾符，用來表示元素的狀態，比如active、disabled等等。</p>
</li>
</ul>
<h2 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h2><p>BEM的寫法是使用兩個下底線或破折號連接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Block__Element</span><br><span class="line">Block__Element--Modifier</span><br></pre></td></tr></table></figure>

<p>ex: </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">navbar</span><br><span class="line">navbar__item</span><br><span class="line">navbar__item<span class="attr">--active</span></span><br></pre></td></tr></table></figure>

<h2 id="在SCSS中使用"><a href="#在SCSS中使用" class="headerlink" title="在SCSS中使用"></a>在SCSS中使用</h2><p>之前介紹<a href="https://huanginch.github.io/2022/08/29/SCSS/">scss</a>時有介紹到scss可以用&amp;來做連接，所以BEM命名法就可以完美的套用到scss結構中</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">navbar &#123;</span><br><span class="line">	....</span><br><span class="line">    &amp;__item &#123;</span><br><span class="line">    	....</span><br><span class="line">        &amp;<span class="attr">--active</span> &#123;</span><br><span class="line">        	...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>BEM綜合了OOCSS清晰架構，也不會像SMACSS那樣會非語意化的class，算是三者中我最喜歡的一種命名方式，不過並不會每個元素都使用BEM，依照需求調整才是最好的做法。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bem</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS排版: FLEX(1)</title>
    <url>/2022/05/24/CSS-FLEX-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="此文章為觀看六角學院CSS-Flex-超詳解，彈性版型任你操控！影片後整理之筆記"><a href="#此文章為觀看六角學院CSS-Flex-超詳解，彈性版型任你操控！影片後整理之筆記" class="headerlink" title="此文章為觀看六角學院CSS Flex 超詳解，彈性版型任你操控！影片後整理之筆記"></a>此文章為觀看<a href="https://youtu.be/88ymaHaStoQ">六角學院CSS Flex 超詳解，彈性版型任你操控！</a>影片後整理之筆記</h3><p>整理下來有點太多，可能會分成兩篇來記錄，想看下一篇可以到<a href="https://huanginch.github.io/2022/05/25/CSS-Flex-2/">這裡</a></p>
<h2 id="FLex介紹"><a href="#FLex介紹" class="headerlink" title="FLex介紹"></a>FLex介紹</h2><p>Flex是一個CSS中很常使用的排版工具，他能夠自由操作div容器，主要概念為下圖</p>
<p><img src="/../images/pasted-8.png"></p>
<p>可以透過操作主軸與交錯軸來達成排版，預設主軸線為由左至右，交錯軸為由上至下</p>
<h3 id="語法介紹"><a href="#語法介紹" class="headerlink" title="語法介紹"></a>語法介紹</h3><h4 id="外容器"><a href="#外容器" class="headerlink" title="外容器:"></a>外容器:</h4><ol>
<li>display: flex;(<strong>需加在外容器上</strong>)</li>
<li>flex-flow:<ul>
<li>flex-direction-控制主軸方向:<ul>
<li>row (預設值，由左至右)<img src="/../images/pasted-18.png"></li>
<li>row-reverse(由右至左)<img src="/../images/pasted-19.png"></li>
<li>column(由上至下)<img src="/../images/pasted-45.png"></li>
<li>column-reverse(由下至上)<img src="/../images/pasted-21.png"></li>
</ul>
</li>
<li>flex-wrap-換行方式:<ul>
<li>nowrap(不使用)<img src="/../images/pasted-22.png"></li>
<li>wrap(遇到邊界自動換行)<img src="/../images/pasted-23.png"></li>
</ul>
</li>
</ul>
</li>
<li>justify-content-對齊主軸線方式:<ul>
<li>center(置中)<img src="/../images/pasted-24.png"></li>
<li>flex-start(靠主軸起點)<img src="/../images/pasted-25.png"></li>
<li>flex-end(靠主軸終點)<img src="/../images/pasted-26.png"></li>
<li>space-between(中間留空格)<img src="/../images/pasted-27.png"></li>
<li>space-around(元素左右都留空格，但比例為1:2:1)<img src="/../images/pasted-28.png"></li>
<li>space-evenly(元素左右平均分配空格)<img src="/../images/pasted-29.png"></li>
</ul>
</li>
<li>align-items-與交錯軸對齊方式:<ul>
<li>center(置中)<img src="/../images/pasted-30.png"></li>
<li>flex-start(靠交錯軸起點)<img src="/../images/pasted-31.png"></li>
<li>flex-end(靠交錯軸終點)<img src="/../images/pasted-32.png"></li>
<li>strech(預設值，撐開至flexbox大小)<img src="/../images/pasted-33.png"></li>
<li>baseline(對齊內容物基線)<img src="/../images/pasted-34.png"></li>
</ul>
</li>
<li>align-content-內容物對齊方式<ul>
<li>center(每行對齊交錯軸線中間)<img src="/../images/pasted-35.png"></li>
<li>flex-start(每行貼齊交錯軸線最前端)<img src="/../images/pasted-36.png"></li>
<li>flex-end(每行貼齊交錯軸線最末端)<img src="/../images/pasted-37.png"></li>
<li>space-between(第一行與最後一行分別對齊交錯軸線最前端與最末端)<img src="/../images/pasted-38.png"></li>
<li>space-around(每行平均分配每行間距)<img src="/../images/pasted-39.png"></li>
<li>strech(預設值，每行內容元素全部撐開至 flexbox 大小)<img src="/../images/pasted-40.png"></li>
</ul>
</li>
</ol>
<h4 id="內容器"><a href="#內容器" class="headerlink" title="內容器:"></a>內容器:</h4><ol>
<li>flex:<ul>
<li>flex-grow(子元素伸展比例分配)</li>
<li>flex-shrink(子元素壓縮比例分配)</li>
<li>flex-basis(子元素基本大小)</li>
</ul>
</li>
<li>order: 老師這裡沒有特別介紹，以後學會再補上</li>
<li>align-self:<ul>
<li>center(置中)<img src="/../images/pasted-41.png"></li>
<li>flex-start(靠交錯軸起點)<img src="/../images/pasted-42.png"></li>
<li>flex-end(靠交錯軸終點)<img src="/../images/pasted-43.png"></li>
<li>strech(撐開至flexbox大小)<img src="/../images/pasted-44.png"></li>
</ul>
</li>
<li>margin-子元素邊界<img src="/../images/pasted-46.png"></li>
</ol>
<p>下一篇將會以程式碼做與實例做更進一步的講解。</p>
]]></content>
      <categories>
        <category>css flex</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css-flex</tag>
      </tags>
  </entry>
  <entry>
    <title>C Error: 不允許回傳函式的函式</title>
    <url>/2022/05/30/C-function-return-function/</url>
    <content><![CDATA[<p>昨天在寫C語言期末專案的時候遇到了這個錯誤，簡單來說因為C語言沒辦法像javascript或其他語言那樣在函式裡回傳函式(無法寫巢狀函式)才會產生這個錯誤，但問題是我宣告的函式根本沒有回傳函式阿! 那怎麼會這樣? 先來看看我宣告了什麼函式。</p>
<p><img src="/../images/pasted-63.png"></p>
<p>這裡我是想寫一個自己的qsort，並用自訂的struct與linked-list實作，你們有發現什麼問題嗎? 沒錯就是這個函式的名稱，原來sort是c的保留字阿，我完全忘記c已經有sort()這個函式，應該說我以前沒有用到就一直以為只有qsort()，所以我只需要把sort名字改掉就行了，這邊我改成_sort()就沒報錯了。</p>
<p><img src="/../images/pasted-64.png"></p>
<p>又學到了一課，不過這次好像是我自己蠢，下次記得sort()不能拿來當自訂函式名稱。</p>
]]></content>
      <tags>
        <tag>c</tag>
        <tag>c error</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: OOCSS</title>
    <url>/2022/08/31/CSS-OOCSS/</url>
    <content><![CDATA[<p>物件導向CSS(Object-Oriented CSS，OOCSS)，是一種常見的css命名方式，目的是鼓勵開發者設計出的class能夠最大化的重複使用，讓程式碼更結構化、更易於管理與維護，未來在新增樣式上就不需要撰寫新的class。</p>
<h2 id="兩大原則"><a href="#兩大原則" class="headerlink" title="兩大原則"></a>兩大原則</h2><ul>
<li><p>樣式與結構分離: 元素的大小、樣式、顏色做分離，不要寫在同一個class。</p>
<ul>
<li>類似bs5中的btn、btn-primary之間的關係，元件的基礎樣式是一個class，其他可更改的，比如說大小、顏色等等會獨立出來成另一個class，如此一來程式碼會變得更加靈活。  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-large box-primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-small box-secondary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>box的結構與樣式分離  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-large</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-small</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-primary</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-secondary</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>內容與容器分離: 少用標籤選擇器，盡量使用類別去撰寫。</p>
<ul>
<li><p>比如說我現在有一個p段落，想讓他的顏色和其他p段落不同，為他設置一個新的class，而不是直接用子代選擇器或者後代選擇器，如此一來如果以後有其他元素也想使用這個樣式就可以直接使用，在bs5或tailwind中utilities就是這個目標的體現。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>不要使用:</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.section1</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>推薦使用:</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>適當的使用可以減少class的重複率，使得程式碼更加乾淨，但因為命名方式不夠語意化，所以相當仰賴文件的撰寫，若是網站規模不大不使用oocss或許會是更好的選擇。除了OOCSS，還有SMACSS、BEM兩種命名方式，之後也會撰寫文章來介紹。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>oocss</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: opacity</title>
    <url>/2022/08/25/CSS-opacity/</url>
    <content><![CDATA[<p>opacity顧名思義就是拿來調整透明度的，可以針對目標元素改變透明度，數值為0~1之間，0為完全透明，1為完全不透明。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="opacity" src="https://codepen.io/intHuang/embed/VwXOvyR?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/VwXOvyR">
  opacity</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>範例中的box1與box2正是使用了opacity的區別，一般來說opacity會應用在hover的效果，我通常會用在圖片上，讓圖片產生hover效果，而一般開發者常見的用法會是overlay，讓他產生一個有透明度的背景(overlay)覆蓋整個元素，範例中的box3就是應用了opacity與overlay來達到效果的。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: SMACSS</title>
    <url>/2022/09/01/CSS-SMACSS/</url>
    <content><![CDATA[<p>SMACSS(Scalable and Modular Architecture for CSS)，使用結構分類，將CSS拆分成不同類別，在使用SCSS開發時也會用到SMACSS，將樣式拆分成多個檔案，主要會拆成以下五個類別:</p>
<ul>
<li>base: css基礎設定，包含h1~h2、html、body上等等的設定。</li>
<li>layout: 網頁基礎架構，包含header及footer。</li>
<li>module: 各種元件，例如button、form等等。</li>
<li>state: 元件狀態，例如a:hover、button:focus。</li>
<li>theme: 元件的顏色或大小。</li>
</ul>
<p>命名方式會用-分隔，比如bs5中的btn-primary就是SMACSS的方式。</p>
<p>SMACSS雖然在排列組合上很方便，但結構分類是使用者自己劃分，界線較為模糊。<br>SMACSS與<a href="https://huanginch.github.io/2022/08/31/CSS-OOCSS/">OOCSS</a>很相似，也有相同的優點，都能夠讓程式碼更加易於維護。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>smacss</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: transform</title>
    <url>/2022/08/30/CSS-transform/</url>
    <content><![CDATA[<p>transform提供開發者可以對元素旋轉、位移、縮放等等，只要使用對應的函式就能達到效果。</p>
<h2 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h2><ul>
<li>translate: 位移<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x, y);</span><br></pre></td></tr></table></figure></li>
<li>matrix: 向量變換<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">matrix</span>(a, b, c, d, tx, ty);</span><br></pre></td></tr></table></figure></li>
<li>scale: 縮放<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(sx);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(sx, sy);</span><br></pre></td></tr></table></figure></li>
<li>rotate: 旋轉<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(a);</span><br></pre></td></tr></table></figure></li>
<li>skew: 傾斜<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(ax);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>(ax, ay);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 轉場動畫(transition)</title>
    <url>/2022/08/17/CSS-transition/</url>
    <content><![CDATA[<p>transition可以為樣式在改變時添加動畫，比如hover時可能會改變字體顏色、多條border等等，加入transition可以讓這個改變更加流暢。</p>
<h2 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h2><p>要轉換的目標css屬性，比如color、border等等，也可以用all針對所有改變的屬性作出動畫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">transition-property</span>: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h2><p>設定動畫要持續多久</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">transition-duration</span>: <span class="number">0.5s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h2><p>動畫呈現函式，可以自訂動畫呈現的效果，但這方面比較複雜，所以CSS也有提供幾個事先寫好的函式，更多可以參考<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function">官方文件</a></p>
<ul>
<li><p>linear</p>
</li>
<li><p>ease</p>
</li>
<li><p>ease-in</p>
</li>
<li><p>ease-out</p>
</li>
<li><p>ease-in-out</p>
</li>
<li><p>step-start</p>
</li>
<li><p>step-end</p>
</li>
</ul>
<p>關於動畫呈現效果我之後會補上文章</p>
<h2 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h2><p>設定延遲幾秒才出現動畫</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">transition-delay</span>:<span class="number">250ms</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>上述的語法都可以簡寫成transition一個屬性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/oNqQmRg?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/oNqQmRg">
  Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>[註] transition要放在a上，不能放在hover上，否則滑鼠游標離開a時會沒有動畫。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 單位(unit)</title>
    <url>/2022/08/21/CSS-unit/</url>
    <content><![CDATA[<p>在CSS中有許多的單位提供開發者使用，不同情況下適合的單位都不同，這篇將會彙整所有CSS可以使用的單位。</p>
<h2 id="絕對單位"><a href="#絕對單位" class="headerlink" title="絕對單位"></a>絕對單位</h2><p>不會隨著root大小或螢幕大小改變的單位。</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>cm</td>
<td>公分</td>
</tr>
<tr>
<td>mm</td>
<td>毫米</td>
</tr>
<tr>
<td>in</td>
<td>英吋</td>
</tr>
<tr>
<td>px</td>
<td>像素</td>
</tr>
<tr>
<td>pt</td>
<td>points(1pt &#x3D; 1&#x2F;72 of 1in)</td>
</tr>
<tr>
<td>pc</td>
<td>picas (1pc &#x3D; 12 pt)</td>
</tr>
</tbody></table>
<h2 id="相對單位"><a href="#相對單位" class="headerlink" title="相對單位"></a>相對單位</h2><p>會自適應的單位，為了因應RWD的需求，現在大多使用這些單位來做開發。</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>em</td>
<td><a href="https://huanginch.github.io/2022/08/15/css-em-and-rem/">介紹文章</a></td>
</tr>
<tr>
<td>ex</td>
<td>根據x軸的高度改變(很少使用)</td>
</tr>
<tr>
<td>ch</td>
<td>根據字元’0’的大小改變</td>
</tr>
<tr>
<td>rem</td>
<td><a href="https://huanginch.github.io/2022/08/15/css-em-and-rem/">介紹文章</a></td>
</tr>
<tr>
<td>vw</td>
<td><a href="https://huanginch.github.io/2022/08/18/CSS-vh-and-vw/">介紹文章</a></td>
</tr>
<tr>
<td>vh</td>
<td><a href="https://huanginch.github.io/2022/08/18/CSS-vh-and-vw/">介紹文章</a></td>
</tr>
<tr>
<td>vmax</td>
<td>根據viewport最小邊改變</td>
</tr>
<tr>
<td>vmin</td>
<td>根據viewport最大邊改變</td>
</tr>
<tr>
<td>%</td>
<td>百分比</td>
</tr>
</tbody></table>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最常使用的單位是px、rem、vw、vh、%這幾個，如果可以的話盡量使用px以外的其他幾種單位，因為px是絕對單位。不過並不是所有元素都要更改成相對單位，如果是border或shadow之類的寬度還是會習慣使用px，因為我們通常不會希望這些樣式改變。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 製作三角形</title>
    <url>/2022/09/05/CSS-triangle/</url>
    <content><![CDATA[<p>你知道CSS不只可以用來幫網頁增加樣式，還可以在網頁上畫圖嗎?在卡片右下方放上一個三角形算是蠻常見的設計(如圖)，所以這篇會來介紹如何畫出三角形，為你的網頁增加設計感。</p>
<p><img src="/../images/pasted-126.png"></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li><p>首先給一個box</p>
<p> <img src="/../images/pasted-127.png" alt="box"></p>
</li>
<li><p>給他的四邊加上不同顏色的border觀察一下，可以發現border和border之間的邊緣是斜的，我們就是要利用這個特性製作三角形</p>
</li>
</ol>
<p><img src="/../images/pasted-128.png"></p>
<ol start="3">
<li>把背景改成透明只留下border</li>
</ol>
<p><img src="/../images/pasted-129.png"></p>
<ol start="4">
<li>讓box的長寬都歸零，這時候三角形就出現了</li>
</ol>
<p><img src="/../images/pasted-131.png"></p>
<ol start="5">
<li>把自己想要的三角形留下，其他border改成透明(這裡我留右邊和下面，並都改成藍色)</li>
</ol>
<p><img src="/../images/pasted-132.png"></p>
<h2 id="Codepen"><a href="#Codepen" class="headerlink" title="Codepen"></a>Codepen</h2><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/rNvaoxV?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/rNvaoxV">
  Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>是不是很神奇? 自己在寫得時候可以跳過1、2步驟，直接寫transparent就好，這邊只是方便講解才列出的。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: vh、vw</title>
    <url>/2022/08/18/CSS-vh-and-vw/</url>
    <content><![CDATA[<p>在CSS中有兩個單位可以做到稱滿整個版面，一個是vh(view height)，一個是vw(view width)。</p>
<p>這兩個單位代表的是螢幕可視範圍高度與寬度的百分比，所以100vh與100vw分別代表100%<br>整個螢幕可視高度與100%螢幕可視寬度。</p>
<p>與%單位不同，%是以父層來計算，vw與vh是整個視窗，所以經常會用在banner上。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="vh and vw" src="https://codepen.io/intHuang/embed/mdxaXEZ?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/mdxaXEZ">
  vh and vw</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>這裡的example使用了vw與vh這兩個單位，所以會撐滿整個視窗。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: white-space</title>
    <url>/2022/09/10/CSS-white-space/</url>
    <content><![CDATA[<p>white-space是針對空格做換行的設定，有以下幾個選擇</p>
<ul>
<li>normal: 連續的空白字元會被合併(collapse)，換行字元被視為空白字元。換行只在被文字空間限制時發生。</li>
<li>nowrap: 對待空白和換行字元的方式和normal一樣，但不會發生任何換行。</li>
<li>pre: 連續的空白字元都會被保留。換行在有換行字元以及<code>&lt;br&gt;</code>時發生。</li>
<li>pre-wrap: 連續的空白字元都會被保留。換行會在換行字元、有<code>&lt;br&gt;</code>元素以及被文字空間限制時發生。</li>
<li>pre-line: 連續的空白字元會被合併(collapse)。換行在換行字元、 <code>&lt;br&gt;</code>以及被文字空間限制時發生。</li>
</ul>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="white-spacec" src="https://codepen.io/intHuang/embed/VwxaOXM?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/VwxaOXM">
  white-spacec</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO ERROR: spawn ENOENT</title>
    <url>/2022/05/23/ERROR-ENOENT/</url>
    <content><![CDATA[<p>前幾天在更新文章到github時出現了一個錯誤碼:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: spawn ENOENT</span><br></pre></td></tr></table></figure>
<p>ENOENT是Error NO ENTry 或 Error No ENTity的縮寫，意思等同於常見的no such file or directory，中文意思就是檔案不存在或找不到路徑。</p>
<p>本以為是deploy需要的hexo-publish.bat沒寫好或_config.yml中哪裡沒設定好，但後來發現是文章我使用了中文命名才導致他無法辨識。</p>
<p>所以說<strong>不要用中文幫文章命名，標題可以建好檔案之後改</strong>。</p>
<p>也算是學了一課，不然當初找半天找不要哪裡錯。</p>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>hexo error</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Font 載入方法</title>
    <url>/2022/08/04/Google-Font/</url>
    <content><![CDATA[<p>Google提供了許多開源的線上字型，這篇會來介紹如何在自己的專案載入Google提供的字型。</p>
<ol>
<li><p>首先到 <a href="https://fonts.google.com/about">Google Font</a>的網站點選Font</p>
<p> <img src="/../images/pasted-92.png"></p>
</li>
<li><p>選一個你想要的字型，也可以用搜尋的</p>
<p> <img src="/../images/pasted-93.png"></p>
</li>
<li><p>我這邊示範選擇Roboto，點進去之後會看到下面的畫面</p>
<p> <img src="/../images/pasted-94.png"></p>
</li>
<li><p>對自己想要的字重按+號，想按引入幾種就按幾種。</p>
<p> <img src="/../images/pasted-95.png"></p>
</li>
<li><p>右手邊就會出現你選擇的字型</p>
<p> <img src="/../images/pasted-96.png"></p>
</li>
<li><p>點選link可以貼到html的header上</p>
<p> <img src="/../images/pasted-97.png"></p>
</li>
<li><p>又或者是點選import可以從scss上載入</p>
<p> <img src="/../images/pasted-98.png"></p>
</li>
<li><p>這樣就載入完成了，可以使用font-family語法直接引入字型了</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: Roboto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery: Html錨點動畫</title>
    <url>/2022/08/05/JQuery-anchor-animation/</url>
    <content><![CDATA[<p>我在<a href="https://huanginch.github.io/2022/08/02/html-anchor/">這篇</a>有介紹到html中的錨點，而本篇會來介紹如何用JQuery來讓跳轉的動畫變得流暢。</p>
<h2 id="載入JQuery"><a href="#載入JQuery" class="headerlink" title="載入JQuery"></a>載入JQuery</h2><p>首先第一步當然是載入JQuery，載入的方法在<a href="https://huanginch.github.io/2022/07/29/JQuery-intro/">JQuery介紹</a>有說明。</p>
<h2 id="撰寫JQuery"><a href="#撰寫JQuery" class="headerlink" title="撰寫JQuery"></a>撰寫JQuery</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回頂部</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;html,body&quot;</span>).<span class="title function_">animate</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">scrollTop</span>: <span class="number">0</span> <span class="comment">//回到第一個區塊</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">800</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//其它連到對應區塊</span></span><br><span class="line">  $(<span class="string">&quot;.navbar-list a&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hrefLink = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hrefLink);</span><br><span class="line">    $(<span class="string">&quot;html,body&quot;</span>).<span class="title function_">animate</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">scrollTop</span>: $(hrefLink).<span class="title function_">offset</span>().<span class="property">top</span><span class="comment">//直接到相對位置</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">800</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先我們來一步一步拆解，回頂部區塊就是會滾動回網頁最頂部，用在href&#x3D;”#”的link中，所以當相對應得標籤被點擊(在我這裡是h1)，html和body就會用animate function滾回頂部，用800毫秒的時間，而這裡最重要的就是scrollTop()，scrollTop代表目前viewport最頂端的元素在網頁中的位置，所以將scrollTop設為0就會回到頂部。</p>
</li>
<li><p>接著是其他按鈕會滾動到對應區塊的動畫，同樣按了對應的按鈕(我這裡叫navbar-list裡的a)就會產生滾動動畫，透過hrefLink取得id，再透過.offset().top，取得那個元素的頂部座標，就會產生滾動動畫了。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>jquery</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JQuery製作漢堡選單</title>
    <url>/2022/08/09/JQuery-hambar/</url>
    <content><![CDATA[<p>漢堡選單是一個很常使用在手機版網頁的菜單呈現方式，因為按鈕是三條線，很像一個漢堡所以稱為漢堡選單。</p>
<p><img src="/../images/pasted-99.png" alt="hambar"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>漢堡選單的原理是利用jquery的toggleClass來為navbar新增或移除css class，所以分成兩個部分，一個是css，一個是jquery。</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navbar</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">max-height</span>: <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);        </span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">transition</span>: max-height <span class="number">0.7s</span>;</span><br><span class="line">    <span class="attribute">background</span>: $navbar__color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.navbar</span><span class="selector-class">.show</span>&#123;</span><br><span class="line">	<span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先是navbar的樣式，將navbar的高度設為0讓它消失，並用position和transform將navbar固定在自己想要的位置，transition設定展開動畫，overflow將多餘的內容隱藏，背景色設定成和原本的navbar相同。</p>
<p>.show將navbar的高度變成500px(這裡可以自訂)，因為transition的緣故會產生動畫。</p>
<h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.menu-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    $(<span class="string">&#x27;.navbar&#x27;</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>按下漢堡選單後(我這裡的class叫menu-btn)，對navbar新增show class，所以高度會變成500，這時菜單就會出現了。而e.preventDefault()單純是用來取消a的預設動作。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="hambar" src="https://codepen.io/intHuang/embed/KKoBpwG?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/KKoBpwG">
  hambar</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

]]></content>
      <tags>
        <tag>css</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery介紹</title>
    <url>/2022/07/29/JQuery-intro/</url>
    <content><![CDATA[<p>此文章為觀看六角學院「<a href="https://youtu.be/GVWOIP-HX70">jQuery基礎教學</a>」影片之筆記。</p>
<h2 id="什麼是JQuery"><a href="#什麼是JQuery" class="headerlink" title="什麼是JQuery"></a>什麼是JQuery</h2><p>JQuery是一個Javascript的函式庫，通常被用於網頁動畫呈現，優點是小、輕量、內容豐富且支援多個瀏覽器，所以很常被使用在網頁設計上。</p>
<h2 id="載入方式"><a href="#載入方式" class="headerlink" title="載入方式"></a>載入方式</h2><p>要把JQuery加入到自己的作品內有幾個方法:</p>
<ol>
<li><p><a href="https://jquery.com/">官網下載</a></p>
</li>
<li><p>CDN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://cdnjs.com/libraries/jquery">其他版本CDN</a></li>
</ul>
</li>
<li><p>npm或yarn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jquery</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install jquery</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>當然還有其他下載方法，詳細可以參考<a href="https://jquery.com/download/">官網</a></li>
</ul>
<h2 id="範例程式"><a href="#範例程式" class="headerlink" title="範例程式"></a>範例程式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在JQuery中使用了$()來代替listener，所以裡面會放置選擇器，再使用.functionname()來觸發目標函式以達到想要的效果。</p>
<h2 id="常見函式"><a href="#常見函式" class="headerlink" title="常見函式"></a>常見函式</h2><p>動態載入、改變屬性等等都是JQuery常見的用法，所以有時候觀看原始碼時會發現有些部分在HTML中工程師並沒有寫任何東西，那他可能是透過JQuery進行動態載入。例如常見的<a href="https://themeisle.com/">Nivo Slider</a>都是使用JQuery作呈現。</p>
<h2 id="APIS"><a href="#APIS" class="headerlink" title="APIS"></a>APIS</h2><p>關於JQuery的所有函式都可以在官網文件找到:<a href="https://api.jquery.com/">傳送門</a></p>
]]></content>
      <tags>
        <tag>jquery</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery: toggleClass</title>
    <url>/2022/08/03/JQuery-toggleClass/</url>
    <content><![CDATA[<p>我上次在<a href="https://huanginch.github.io/2022/07/29/JQuery-intro/">這篇</a>簡單介紹了jQuery，這篇要來介紹其中一個常見的function: toggleClass。</p>
<p>這個函式是我在學如何製作漢堡選單時學習到的，之後也會寫一篇關於如何製作漢堡選單的文章。</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>toggleClass可以改變class的有無，比如說我對一個按鈕點擊後想要對某個元素做出樣式改變就可以使用。以下面這個例子來說，我設定成點擊.menu-btn後會修改.navbar-list的show class狀態，如果.navbar-list有show class會移除，沒有就會新增。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.menu-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    $(<span class="string">&#x27;.navbar-list&#x27;</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON格式</title>
    <url>/2022/06/24/JSON%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>JSON是一種資料儲存的格式，全名為JavaScript Object Notation，但json格式不只可以在js中使用，其他語言也可以，其中在做網路請求時也很常使用json格式來傳遞資料。</p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ming&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Amy&#x27;,</span></span><br><span class="line"><span class="string">  &quot;</span>age<span class="string">&quot;: 20,</span></span><br><span class="line"><span class="string">  &quot;</span>sex<span class="string">&quot;, &quot;</span>female<span class="string">&quot;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>其實跟js的物件格式很像，你可以用陣列包裹物件，或是用物件包裹陣列，不同的是key會包在雙引號裡面。比較常見的用法是如同範例程式中用陣列包裹。</p>
<p>json格式算是我最喜歡的資料格式，可能是因為我當初在學校學java第一個學怎麼處理的資料格式就是json。</p>
<p>下篇會來介紹如何用js讀取json的值。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascipt: 陣列</title>
    <url>/2022/06/07/Javascipt-array/</url>
    <content><![CDATA[<p>在<a href="https://huanginch.github.io/2022/06/03/javascript-datatype/">資料型態</a>那篇有介紹到array這個型別，這篇就會詳細介紹array的基本使用方法與概念。</p>
<h2 id="宣告"><a href="#宣告" class="headerlink" title="宣告"></a>宣告</h2><p>陣列宣告會用中括號來表示，而陣列的值會放在中括號中，陣列的值可以是其他資料型態，但是每個值都必須是相同型態。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空陣列</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 數字陣列</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//字串陣列</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>陣列的縮寫常會使用arr</li>
</ul>
<h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>陣列有所謂的索引值，可以透過索引值取得對應的值，而索引值是從0開始，寫法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>, <span class="number">520</span>, <span class="number">891</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">//執行結果: 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]); <span class="comment">//執行結果: 520</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]); <span class="comment">//執行結果: 891</span></span><br></pre></td></tr></table></figure>

<h2 id="賦值"><a href="#賦值" class="headerlink" title="賦值"></a>賦值</h2><p>如果想要更改arr中的內容，寫法也跟取值一樣，並使用賦值運算子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">800</span>, <span class="number">900</span>, <span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">//執行結果: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//執行結果: [1, 900, 1000]</span></span><br></pre></td></tr></table></figure>
<p>可以看到arr第一個值(索引值0)變成了1。</p>
<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>前面都只有針對已經有的值做處理，那如果我們想要增加一個元素進去該怎麼做?</p>
<ul>
<li>push():<ul>
<li>使用push可以在陣列最後面新增元素  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">720</span>, <span class="number">800</span>, <span class="number">100</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//執行結果: [720, 800, 100, 500]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>unshift()”<ul>
<li>使用unshift可以在陣列最前面新增元素  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">720</span>, <span class="number">800</span> ,<span class="number">100</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//執行結果: [500, 720, 800, 100]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h2><p> 有了新增，自然也會有刪除</p>
<ul>
<li>pop():<ul>
<li>與push相對，pop可以從陣列最後面刪除元素  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">720</span>, <span class="number">800</span>, <span class="number">100</span>];</span><br><span class="line">arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//執行結果: [720, 800]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>shift():<ul>
<li>與unshift()相對，shift可以從最前面刪除元素  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">720</span>, <span class="number">800</span>, <span class="number">100</span>];</span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//執行結果: [800, 100]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="取得長度"><a href="#取得長度" class="headerlink" title="取得長度"></a>取得長度</h2><p>想取得當前陣列長度(意即有幾個元素)可以使用array.length。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">//執行結果: 3</span></span><br></pre></td></tr></table></figure>

<p>以上述程式碼來看，我宣告的arr使有三個元素的陣列，所以arr.length的值就會是3。</p>
<br>
    
<p>基本操作就介紹到這邊，其他進階的array function會留到下一篇做講解。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 陣列函式(上)</title>
    <url>/2022/06/09/Javascript-array-function/</url>
    <content><![CDATA[<p>我們在<a href="https://huanginch.github.io/2022/06/07/Javascipt-array/">這篇文</a>有提到陣列的基本性質介紹與簡單的賦值取值操作，這篇會來介紹可以用在陣列上的一些常用函式。</p>
<ul>
<li><p>forEach():</p>
<ul>
<li>forEach有點像for迴圈，他會遍歷每個元素，用法如下。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*執行結果為:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
  有幾個特別的地方要注意，首先，括弧內要放入一個函式，再來，函式傳入的參數至少要有一個item，但後面的index，array可以視情況加，而他們分別代表當前元素的值、索引值與陣列本身，值得提醒的一點，item、index、array這三個參數名稱不是固定的，你可以改成a、b、c也沒差，但還是建議用方便辨識的方法來命名。</li>
</ul>
</li>
<li><p>filter():</p>
<ul>
<li>可以根據給的條件，回傳符合條件的元素陣列。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> item &gt; <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">//執行結果: [2, 3]</span></span><br></pre></td></tr></table></figure>
  以這段程式碼來說，return後就是我所設的條件，其中傳入的function與item就和forEach一樣。與forEach不同的是，filter不會修改到原本的arr，而是會建一個新的array，所以我才會又宣告一個newArr來接。</li>
</ul>
</li>
<li><p>find():</p>
<ul>
<li>find跟filter很像，都會去尋找符合條件的元素並回傳，但find只會找<strong>第一個</strong>符合條件的，所以他回傳的是元素不是陣列。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> item &gt; <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//執行結果: 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>findIndex():</p>
<ul>
<li>從名稱可以看出來，這是用來找索引值的，而跟find相同，只會找符合的第一個元素。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aIndex = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> item &gt; <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aIndex); <span class="comment">//執行結果: 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  第一筆符合的是2，而2的index為1，所以結果為1。</li>
</ul>
</li>
<li><p>map():</p>
<ul>
<li>map和forEach很像，唯一不同的是他會回傳新陣列。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> item &gt; <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">//執行結果: [false, true, true]</span></span><br></pre></td></tr></table></figure>
  map遍歷了arr中每個元素，並根據條件做出判斷，1沒有小於1所以是false，2、3都大於1所以是true。</li>
</ul>
</li>
<li><p>除了forEahc之外，其他三個都會回傳一個新的陣列，所以要記得加上return才不會出錯，下篇我會來介紹slice、splice等等。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 邏輯運算子</title>
    <url>/2022/06/04/Javascript-logic-operator/</url>
    <content><![CDATA[<p>這篇會來簡單介紹js中的邏輯運算子語法</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><ul>
<li>and: &amp;&amp;</li>
<li>or: ||</li>
<li>not: !</li>
</ul>
<p>其實語法就跟多數語言一樣，沒什麼不同。</p>
<h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h2><table>
<thead>
<tr>
<th>and</th>
<th>True</th>
<th>False</th>
</tr>
</thead>
<tbody><tr>
<td>True</td>
<td>True</td>
<td>False</td>
</tr>
<tr>
<td>False</td>
<td>False</td>
<td>Fasle</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>or</th>
<th>Fsalse</th>
<th>True</th>
</tr>
</thead>
<tbody><tr>
<td>Fasle</td>
<td>Fasle</td>
<td>True</td>
</tr>
<tr>
<td>True</td>
<td>True</td>
<td>True</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>not</th>
<th>Fasle</th>
<th>True</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>True</td>
<td>Fasle</td>
</tr>
</tbody></table>
<p>很簡單的一篇，但我想把各種運算子都記錄一下。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用HEXO建立個人部落格</title>
    <url>/2022/05/19/My-First-Post/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>一些廢話，不想看可以直接看步驟</strong></p>
<p>許多工程師都擁有自己的技術部落格，剛好在六角學院上課的時候有一小節就是在介紹寫部落格這件事，剛好趁這次機會開始養成寫部落格的習慣。</p>

<p>一開始我跟著HEXO的 <a href="https://hexo.io/zh-tw/">官方文件</a> 操作，不過中間的步驟可能是我誤解文件的意思還是怎樣，總之我按照首頁的步驟做是錯的，所以想說順便用這個主題來當作我的第一篇文章。</p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟:"></a>步驟:</h2><ol>
<li><p>打開cmd(不會的可以按 window +R 輸入後 cmd 或直接在工具列的搜尋欄搜尋cmd)</p>
</li>
<li><p>切到自己希望網站放置的資料夾，我是選D槽根目錄，當然你也可以選別的槽，又或者是在槽中建個資料夾來放之類的，不過他等等會自己產生一個叫blog的資料夾我就沒特別創資料夾了</p>
</li>
<li><p>依序輸入下列指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li>
<li><p>依照指令執行完就建置好環境了，你的cmd應該會跳出一行字: <strong>Hexo is running at <a href="http://localhost:4000/(%E5%A6%82%E5%9C%96)">http://localhost:4000/(如圖)</a></strong><img src="https://i.imgur.com/UKZ1SWm.png"></p>
</li>
<li><p>在瀏覽器上輸入剛剛出現在cmd上的網址就可以成功打開Hexo部落格了</p>
</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語:"></a>結語:</h2><p>第一次寫部落格，挺有趣的，之後應該會記錄一些Hexo的使用方法跟程式課程的筆記<br>如果有任何問題歡迎和我聯繫</p>
]]></content>
      <categories>
        <category>hexo introduce</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>RWD 與常用斷點</title>
    <url>/2022/07/31/RWD-break-point/</url>
    <content><![CDATA[<p>RWD (Responsive Web Design) 中文稱作響應式網頁，是為了因應不同裝置螢幕大小不同導致網頁必須適應各種螢幕尺寸而衍生出的技術。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: value) &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: value) &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常我會使用max-width來開發，當螢幕寬度小於設定的值時會將樣式改變成括弧內的樣子。</p>
<p>max-width與min-width最大的區別在於max-width是以桌機使用者出發，min-width則是以手機使用者出發，一般來說會先學max-width比較容易上手。</p>
<h2 id="常見斷點"><a href="#常見斷點" class="headerlink" title="常見斷點"></a>常見斷點</h2><p>所謂的斷點是當螢幕寬度達到某個數字時會改變樣式，那個數字就稱為斷點。一般網頁下的斷點為2~5個。</p>
<ol>
<li>1200px</li>
<li>992px</li>
<li>768px或767px[註]</li>
<li>576px</li>
</ol>
<p>以上是比較常用的斷點，1200為桌機，992為平板，768以下為手機，手機又視不同型號可以區分得更細，最小可以到320px。一般我在寫作業都是使用992與767兩個斷點，其他斷點的使用則是依專案需求來規劃。</p>
<p>[註]會有767px是因為平板的直式</p>
<h2 id="其他斷點-手機螢幕尺寸"><a href="#其他斷點-手機螢幕尺寸" class="headerlink" title="其他斷點(手機螢幕尺寸)"></a>其他斷點(手機螢幕尺寸)</h2><ul>
<li><a href="https://uiiiuiii.com/screen/">傳送門</a></li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>Ren&#39;Py : How to hide quick menu on screen</title>
    <url>/2022/05/26/RenPy-hide-quick-menu/</url>
    <content><![CDATA[<p>最近在做的Ren’py side project我想要實作一個功能，就是常見的齒輪菜單，我希望按下畫面上的齒輪就能顯示與隱藏菜單(如圖，並且這裡的菜單都是指遊戲內的quick menu)，找了很多文章提供的方法都不符合我想呈現的效果，所以這篇文就是來介紹如何實作這樣的一個功能。<br><img src="/../images/pasted-53.png"></p>
<p><img src="/../images/pasted-52.png"></p>
<h2 id="隱藏quick-menu"><a href="#隱藏quick-menu" class="headerlink" title="隱藏quick menu"></a>隱藏quick menu</h2><p>首先要讓quick menu有辦法在畫面上被隱藏，原本screen.py裡用的是if quick_menu，但因為齒輪的部分使用了imagebutton，imagebutton裡並沒有比較簡單自訂action的方法，所以我們這裡要把if quick menu這個statement刪掉。<br><img src="/../images/pasted-55.png"></p>
<p>下面宣告quick menu變數部分也可以順便註解掉。<br><img src="/../images/pasted-57.png"></p>
<p>你會發現quick menu依舊還是在畫面上，那是因為這一行程式碼的關係，他會讓quick menu永遠顯示在畫面上，註解掉後就可以對quick menu進行操作了。<br><img src="/../images/pasted-59.png"></p>
<h2 id="增加imagebutton"><a href="#增加imagebutton" class="headerlink" title="增加imagebutton"></a>增加imagebutton</h2><p>再來就是新增一個screen，並放入一個<a href="https://www.renpy.org/doc/html/screens.html#imagebutton">imagebutton</a>，這邊你可以依照自己需求調整位置與圖片之類的。<br><img src="/../images/pasted-60.png"></p>
<h2 id="使用ToggleScreen"><a href="#使用ToggleScreen" class="headerlink" title="使用ToggleScreen()"></a>使用ToggleScreen()</h2><p>最後，這裡利用了<a href="https://www.renpy.org/doc/html/screen_actions.html#ToggleScreen">ToggleScreen()</a>函式來顯示或隱藏quick menu。<br><img src="/../images/pasted-60.png"></p>
<p>之後為了讓齒輪一直保持在畫面上利用了剛剛註解掉的程式碼，把quick_menu改成我自訂的screen。<br><img src="/../images/pasted-56.png"></p>
<p>這樣簡單的自訂quick menu就完成了。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>一開始使不管怎麼用toggleScreen他都不會隱藏，後來才發現原來是init那行在搞鬼，分享出來希望能幫助到跟我有一樣問題的人，以後可能也會有幾篇Ren’Py的文章，希望大家會喜歡。</p>
]]></content>
      <tags>
        <tag>Ren&#39;Py</tag>
      </tags>
  </entry>
  <entry>
    <title>Ren&#39;Py: customize quick menu</title>
    <url>/2022/05/29/Renpy-customize-quickmenu/</url>
    <content><![CDATA[<p><a href="https://huanginch.github.io/2022/05/26/RenPy-hide-quick-menu/">上一篇文</a>介紹到如何隱藏quick menu，這篇要來介紹如何自訂quick menu。<br>其實應該要先寫這篇的，不過因為當時我被如何隱藏菜單搞了很久，想說好不容易解決就先記錄一下，所以這篇算是填坑。</p>
<h2 id="自訂screen-rpy內容"><a href="#自訂screen-rpy內容" class="headerlink" title="自訂screen.rpy內容"></a>自訂screen.rpy內容</h2><p>找到screen quick_menu():的地方就可以自訂quick menu的內容、位置等等</p>
<p><img src="/../images/pasted-61.png"></p>
<p>像我這裡就改了x、y座標，加了一張image，也把一些英文的按鈕改成中文顯示。</p>
<h2 id="自訂gui-rpy內容"><a href="#自訂gui-rpy內容" class="headerlink" title="自訂gui.rpy內容"></a>自訂gui.rpy內容</h2><p>在gui.rpy裡找到包含quick關鍵字的程式碼</p>
<p><img src="/../images/pasted-62.png"></p>
<p>這邊就可以自訂按鈕的顏色、字體大小等等，像我就把它改成粉色，字體大小25<br></p>
<p>相較於隱藏菜單這個簡單多了，不過當時也是找如何改顏色找了一陣子，原來要從gui改，一直以為要在screen.rpy裡修改，那時候是參考了<a href="https://www.youtube.com/playlist?list=PLKdE0Vv4UA5-dqJLpDkPt5CLQzc6hJ-uh">這系列影片</a>，分享給大家。</p>
]]></content>
      <tags>
        <tag>Ren&#39;Py</tag>
      </tags>
  </entry>
  <entry>
    <title>Ren&#39;Py: screen types</title>
    <url>/2022/06/01/Renpy-screen/</url>
    <content><![CDATA[<p>在Ren’Py中所有的畫面都是用screen來呈現，而screen又分為以下幾種:</p>
<ol>
<li>window<ul>
<li>一個普通的視窗，給我的感覺有點像html裡的div，可以設定背景等等，可參考:<a href="https://www.renpy.org/doc/html/style_properties.html#window-style-properties">官方文件</a></li>
</ul>
</li>
<li>frame<ul>
<li>跟window很像，最大的不同是背景樣式會套用gui資料夾裡的frame.png，所以你可以透過自訂frame.png以及gui.rpy中屬於frame的參數來修改他的樣式，同樣可參考<a href="https://www.renpy.org/doc/html/screens.html#frame">官方文件</a></li>
</ul>
</li>
<li>vbox<ul>
<li>會給予一個透明背景的視窗，沒辦法自訂背景樣式，最大的特點是可以讓box內的元素垂直排列，<a href="https://www.renpy.org/doc/html/screens.html#vbox">官方文件</a></li>
</ul>
</li>
<li>hbox<ul>
<li>和vbox基本上一模一樣，最大的不同是box內元素是水平排列，<a href="https://www.renpy.org/doc/html/screens.html#hbox">官方文件</a></li>
</ul>
</li>
<li>imagemap<ul>
<li>完全用圖像來呈現，可以做出像地圖的感覺，<a href="https://www.renpy.org/doc/html/screens.html?highlight=imagemap#imagemap-statements">官方文件</a></li>
</ul>
</li>
</ol>
<p>這篇文只是簡單列出screen可以用的種類，以後會在寫文針對每個的特性等等做更詳細的介紹。</p>
]]></content>
      <tags>
        <tag>Ren&#39;Py</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS: !default</title>
    <url>/2022/08/27/SCSS-default/</url>
    <content><![CDATA[<p>在scss中有個語法叫!default，與css中的!important有點像是相反的存在，關於!important可以參考<a href="https://huanginch.github.io/2022/07/05/css-important/">這篇</a>，不過!defult是scss特有的，css並沒有。</p>
<p>如果在屬性後加上!default他會變成類似預設值的存在，權重最低，可以用任何方式覆蓋。</p>
<p>通常會用在scss的變數上</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span>: blue !default;</span><br></pre></td></tr></table></figure>

<p>舉例來說bs5中的 <code>_variable.scss</code>檔案的許多變數都有使用到!default。</p>
<p><img src="/../images/pasted-120.png" alt="_varaible.scss"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>關於SCSS的基礎介紹可以看<a href="https://huanginch.github.io/2022/08/29/SCSS/">這篇</a>。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS介紹</title>
    <url>/2022/08/29/SCSS/</url>
    <content><![CDATA[<p>SCSS是用來更方便、更有結構性撰寫CSS的一種語言，撰寫後的SCSS會被編譯成CSS。<br>這篇會來介紹SCSS的特色以及與CSS的不同之處。</p>
<h2 id="巢狀結構"><a href="#巢狀結構" class="headerlink" title="巢狀結構"></a>巢狀結構</h2><p>scss可以使用巢狀結構，將子元素包在父元素的大括弧裡。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">	a &#123;</span><br><span class="line">    	<span class="attribute">color</span>: <span class="number">#2D2D2D</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>編譯後的CSS檔案會長這樣</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#2D2D2D</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果名稱相同也可以用&amp;來代替</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">	a &#123;</span><br><span class="line">    	<span class="attribute">color</span>: <span class="number">#2D2D2D</span>;</span><br><span class="line">        </span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        	<span class="attribute">color</span>: <span class="number">#1C1C1C</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &amp;-image &#123; <span class="comment">//if the class name is box-image</span></span><br><span class="line">    	<span class="attribute">width</span>: <span class="number">50%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h2><p>SCSS可以像js那樣設定變數，並帶入到選擇器中</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary</span>: <span class="number">#2D2D2D</span>;</span><br><span class="line"><span class="variable">$secondary</span>: <span class="number">#1C1C1C</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$font-size-lg</span>: <span class="number">48px</span>;</span><br><span class="line"><span class="variable">$font-size-md</span>: <span class="number">24px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="variable">$primary</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size-lg</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>mixin有點類似函數，可以將常用的語法包裝成mixin，要使用時可以直接拿出來，不過要注意，使用時須搭配@include。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> rounded-border() &#123;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="keyword">@include</span> rounded-border();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上就是scss的一些簡單介紹，其他我沒介紹到的語法因為我自己還沒用過也還沒學會，之後會再補上。</p>
]]></content>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-position</title>
    <url>/2022/07/23/background-position/</url>
    <content><![CDATA[<p>關於其他background的屬性都有提到，想要調整background的位置就要利用background-position這個屬性，除了各種數字單位外還可以使用top、bottom、left、right、center。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-position" src="https://codepen.io/intHuang/embed/dymRddN?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/dymRddN">
  background-position</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>可以看到在box1我使用了center，所以背景圖片會居中，如果使用了top、bottom、left、right就會分別靠上、靠下、靠左、靠右。</p>
<p>也可以像box2那樣，寫了bottom和right之後分別寫上數字，此時圖片就會位於從右數來35%的位置，從下數來45%的位置。</p>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>bs5: 卡片元件等高</title>
    <url>/2022/08/19/bs5-card-height/</url>
    <content><![CDATA[<p>之前我有介紹過bootstrap的<a href="https://huanginch.github.io/2022/08/14/bs5-card/">卡片元件</a>，不過在使用這個元件時都會遇到一個問題，就是卡片會自適應內容而導致每張卡片高度不同，這篇會來介紹如何讓卡片元件等高以及在RWD的情況下該如何排版。</p>
<p><img src="/../images/pasted-118.png" alt="card with different height"></p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul>
<li>使用card-group與card-footer。</li>
</ul>
<p>如果我卡片用card-group包裹起來，並為他們都加上card-footer，那麼卡片高度就會自動對齊。</p>
<p><img src="/../images/pasted-119.png" alt="card-group example"></p>
<p>不過這種方法有個問題，他不支援小螢幕下換行，也就是說在RWD方面不是那麼的理想，所以一般來說會使用方法二。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul>
<li>使用網格排版與h-100</li>
</ul>
<p>為每個卡片元件下col，透過bs5的網格系統達成不同螢幕比例下會自動換行。再來是透過在card上使用h-100讓卡片稱滿，使得所有卡片高度相同。</p>
<p>不過這裡有個小地方要注意，換行後稱滿的卡片與下行的卡片之間會沒有間距，所以要透過在col上下margin-bottom來讓卡片之間有間距。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/WNzPvJo?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/WNzPvJo">
  Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<ul>
<li>如果是使用scss來開發可以在_variable.scss中找到card-height屬性，將它改為100%就不用手動一個一個加上h-100。</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>bs5: card</title>
    <url>/2022/08/14/bs5-card/</url>
    <content><![CDATA[<p>卡片是另一個很常用的元件，除了有寫好的排版，內容也能克制化。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><p>card最外層要用card class包住，內容用card-body包住，也可以視情況加入image、card-header。</p>
<p><img src="/../images/pasted-106.png"></p>
<h2 id="card-body"><a href="#card-body" class="headerlink" title="card-body"></a>card-body</h2><p>card-body內可以放入各種內容，文字、圖片、標題、列表等等都有相對應的class可以使用，更多可以參考<a href="https://getbootstrap.com/docs/5.0/components/card/">官方文件</a>。</p>
<p><img src="/../images/pasted-107.png"></p>
<p><img src="/../images/pasted-108.png"></p>
<h2 id="card-header、card-footer"><a href="#card-header、card-footer" class="headerlink" title="card-header、card-footer"></a>card-header、card-footer</h2><p>header和footer分別會在卡片上方和下方加上邊界以及背景</p>
<p><img src="/../images/pasted-109.png"></p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>bs5: button</title>
    <url>/2022/08/12/bs5-component-button/</url>
    <content><![CDATA[<p>button是bootstrap提供的一個元件，可以觀看<a href="https://bootstrap5.hexschool.com/docs/5.1/components/buttons/">官方文件</a>，而這篇會簡單介紹如何使用button以及button這個元件是如何運作的。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>button可以使用在button、a以及input三個tag上，一般來說我都會選擇a或是input，在tag上加入btn class就完成了button元件的引入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="樣式"><a href="#樣式" class="headerlink" title="樣式"></a>樣式</h3><p>button提供了不同種類的預設樣式，最常使用的就是這種實心按鈕，只需要寫上對應的class就能獲得對應的顏色以及hover effect。</p>
<p><code>btn-primary</code> <code>btn-secondary</code> <code>btn-success</code> <code>btn-danger</code> <code>btn-warning</code> <code>btn-info</code> <code>btn-light</code> <code>btn-dark</code> <code>btn-link</code></p>
<p><img src="/../images/pasted-103.png"></p>
<p>除了實心也有提供只有外框(outline)的按鈕樣式</p>
<p><code>btn-outline-primary</code> <code>btn-outline-secondary</code> <code>btn-outline-success</code> <code>btn-outline-danger</code> <code>btn-outline-warning</code> <code>btn-outline-info</code> <code>btn-outline-light</code> <code>btn-outline-dark</code> <code>btn-outline-link</code></p>
<p><img src="/../images/pasted-104.png"></p>
<h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>也有提供大小不同的按鈕，使用方法一樣是加上對應的class即可。</p>
<p><code>btn-lg</code> <code>btn-sm</code></p>
<p><img src="/../images/pasted-105.png"></p>
<h3 id="狀態"><a href="#狀態" class="headerlink" title="狀態"></a>狀態</h3><p>button還可以新增其他狀態，例如禁用、啟用等等</p>
<ul>
<li><p>disable:<br>  禁用屬性直接加上disabled即可</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">disabled</span>&gt;</span>Primary button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  不過在a標籤比較特別，因為a標籤本身沒有disabled屬性，所以要改加在class上，bs5同樣為a標籤撰寫了禁用的樣式</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg disabled&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Primary link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>active:<br>   想讓按鈕為active狀態可以加上 <code>data-bs-toggle=&quot;button&quot;</code> 或是加上 <code>.active</code>這個class</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;button&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">aria-pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Active toggle button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>按鈕不只是上述介紹的而已，還能夠加上其他的class來達到與其他元件互動的效果，不過這部分讓我留到介紹需要使用按鈕作互動的元件時再來談吧。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>bs5: component</title>
    <url>/2022/08/12/bs5-component/</url>
    <content><![CDATA[<p>在bootstrap中最強大的功能就是他所提供的元件(component)，所謂的元件是由bs5所提供事先寫好的、可重複利用的元素，比如說按鈕、navbar、card等等，他們會有固定的樣式與功能，當我們要使用時就可以直接套用，不用自己從頭寫一個。</p>
<h2 id="元件種類"><a href="#元件種類" class="headerlink" title="元件種類"></a>元件種類</h2><p>bs5提供許多元件，比較常用的有button、navbar、tab、card等等，下面這兩張圖列出了所有bs5有提供的元件。</p>
<p><img src="/../images/pasted-100.png"></p>
<p><img src="/../images/pasted-101.png"></p>
<h2 id="使用元件"><a href="#使用元件" class="headerlink" title="使用元件"></a>使用元件</h2><p>想要使用元件可以到相對應的文件，以按鈕為例，先進入按鈕的<a href="https://bootstrap5.hexschool.com/docs/5.0/components/buttons/">文件</a></p>
<p>再來選擇範例的樣式，複製下方程式碼貼到自己的編輯器上，就可以獲得與範例相同的按鈕(記得先引入bs5)</p>
<p><img src="/../images/pasted-102.png"></p>
<p>想要客製化可以依照下方其他範例做修改，更詳細的客製化方法在本篇不會介紹，之後會獨立一篇出來介紹。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>元件比較困難的地方大概是要理解他寫好的class在做什麼才能做到客製化，我自己一開始在使用也是有點不知道從何下手，不過多用幾次就會發現非常方便，因為都幫你寫好了。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap5: 格線系統</title>
    <url>/2022/08/01/bs5-grid/</url>
    <content><![CDATA[<p>在Bootstrap中有一個很重要的東西稱作格線系統，BS5將網頁切分成row與column，一個row裡面會有12個column，所以在撰寫時會產生以下結構:</p>
<p><strong>container &gt; row &gt; column</strong></p>
<p>可以將網頁想成一個excel，container就是工作表，row與column就是欄位。</p>
<p>在常用的設計稿軟體中有些也支援格線系統(如Adobe XD、figma)，工程師可以依照設計師劃的格線為網頁原宿設定統一的寬度，不用去撰寫一些奇怪的寬高(我們稱為magic number，乍看之下沒辦法得到什麼語意化的資訊)</p>
<h2 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h2><p>row與column有個特別的規定，row裡面一定要接column，就像ul或ol裡面一定要接li，但container就沒有此限制。</p>
<h3 id="正確例子"><a href="#正確例子" class="headerlink" title="正確例子"></a>正確例子</h3><ul>
<li><p>ex1:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這是最標準的寫法，container接row再接column。</p>
</li>
<li><p>ex2:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>container底下可以接其他標籤</p>
</li>
</ul>
<h3 id="錯誤例子"><a href="#錯誤例子" class="headerlink" title="錯誤例子"></a>錯誤例子</h3><ul>
<li>ex1:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>sub title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
row後面一定要接col，所以這樣寫是錯的。</li>
</ul>
<h2 id="格線系統的RWD"><a href="#格線系統的RWD" class="headerlink" title="格線系統的RWD"></a>格線系統的RWD</h2><p>格線系統也支援RWD，寫法為 <code>col-size-number</code>，在col後面加上對應螢幕尺寸的代號(sm、md、lg、xl、xxl…)就可以達成RWD的效果。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>要特別注意，並不是網頁所有的元素都必須使用到格線系統，必須視情況使用，有時候我會在網頁中同時用到flex的排版與格線系統。</p>
<p>特別是文字的部分，因為設計師或客戶可能會更改設計稿的文字，所以就算一開始設計稿的某些文字部分是符合格線系統，也不要寫得剛剛好，又或者是就不要使用格線系統，避免之後修改或維護的困難。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>bs5: stretched-link</title>
    <url>/2022/08/20/bs5-strechedlinked/</url>
    <content><![CDATA[<p>在設計網頁時我們很常將一個區塊作為可點擊的連結，例如可點擊的卡片、可點擊的文章等等，平常的情況下我們都會使用<code>a</code> tag來做出這樣的效果，不過bs5提供了一個更簡單的方法來實作。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>只要在對應區塊的a連結內加入<code>stretched-link</code> class就可以讓整個父層元素變得<br>可點擊。</p>
<ul>
<li>以卡片為例</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/dymaJwJ?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/dymaJwJ">
  Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>他是透過偽元素<code>::after</code>並用<code>position:absolute</code>讓a連結覆蓋整個元素，因為bs5的卡片元件本身就有<code>position:relative</code>的特性，所以可以直接使用，其他元件或自己寫的元素沒有的話要記得在最外層加上<code>position: relative</code>才會作用。</p>
<h2 id="可能會讓連結無法延伸的原因"><a href="#可能會讓連結無法延伸的原因" class="headerlink" title="可能會讓連結無法延伸的原因"></a>可能會讓連結無法延伸的原因</h2><p>剛剛也提到<code>stretched-link</code>是透過position:absolute實作，所以只要有以下情況都可能讓他無法使用:</p>
<ul>
<li>static 以外的 position 值。</li>
<li>none 以外的 transform 或 perspective 值。</li>
<li>在 transform 或 perspective 使用 will-change 作為值。</li>
<li>none 以外的 filter 值，或是在 filter 使用 will-change 作為值 (只會在 Firefox 作用)。</li>
</ul>
<p>在使用時要特別注意。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>bs5: Listed Group</title>
    <url>/2022/08/14/bs5-listedgroup/</url>
    <content><![CDATA[<p>群組列表是bs5中的一個元件，使用的是一般的ul結構，不過bs5有為它制定了樣式。</p>
<p>群組列表由外層的list-group和內層的list-group-item組成。</p>
<p><img src="/../images/pasted-110.png" alt="basic listed group"></p>
<ul>
<li>最基本的群組列表</li>
</ul>
<h2 id="狀態"><a href="#狀態" class="headerlink" title="狀態"></a>狀態</h2><p>群組列表同樣可以新增<code>disabled</code>、<code>active</code>等狀態</p>
<ul>
<li>disabled: 將<code>disabled</code> class新增至對應的list-group-item上可以讓它呈現禁用狀態(如圖)。</li>
</ul>
<p><img src="/../images/pasted-111.png"></p>
<ul>
<li>active: 將<code>active</code> class新增至對應的 list-group-item 上可呈現啟用狀態(如圖)。</li>
</ul>
<p><img src="/../images/pasted-112.png"></p>
<h2 id="列表內容"><a href="#列表內容" class="headerlink" title="列表內容"></a>列表內容</h2><p>列表內容可以不是單純的文字，連結、按鈕、圖片等等也都是可以放入列表中的，其中比較特別的是通用標籤。</p>
<ul>
<li>通用標籤是藉由新增通用類別來增加標籤這個樣式</li>
</ul>
<p><img src="/../images/pasted-114.png"></p>
<h2 id="移除邊框與圓角"><a href="#移除邊框與圓角" class="headerlink" title="移除邊框與圓角"></a>移除邊框與圓角</h2><p>預設的列表樣式是有邊框與圓角的，加入<code>.list-group-flush</code> class 可以移除</p>
<p><img src="/../images/pasted-113.png"></p>
<h2 id="其他樣式"><a href="#其他樣式" class="headerlink" title="其他樣式"></a>其他樣式</h2><ul>
<li>常用的前面帶有數字的ol在列表群組也有類似的樣式可以使用，在<code>list-group</code>後方新增 <code>list-group-numbered</code> class 即可</li>
</ul>
<p><img src="/../images/pasted-115.png"></p>
<ul>
<li>想要將列表改成水平的也是可行的，只需要加入<code>list-group-horizontal</code>class即可。</li>
</ul>
<p><img src="/../images/pasted-116.png"></p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>bs5</tag>
      </tags>
  </entry>
  <entry>
    <title>bit operator in C language</title>
    <url>/2022/05/28/c-bit-operator/</url>
    <content><![CDATA[<p>在C語言中做邏輯判斷時經常會用到邏輯運算子(&amp;&amp;、|| 等)，但還有一種位元運算子新手經常會搞混，與邏輯運算子不同，位元運算子是針對位元來做邏輯判斷，而這篇來簡單整理C語言中的位元運算子:</p>
<h2 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h2><ol>
<li>and: &amp;</li>
<li>or: |</li>
<li>xor: ^</li>
<li>left shift: &lt;&lt;</li>
<li>right shift: &gt;&gt;</li>
<li>not: !</li>
</ol>
<h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h2><table>
<thead>
<tr>
<th>and</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>or</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>xor</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>not</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<h2 id="left-shift-and-right-shift"><a href="#left-shift-and-right-shift" class="headerlink" title="left shift and right shift"></a>left shift and right shift</h2><ul>
<li>left shift: 0011 &lt;&lt; 1 &#x3D;&gt; 1100</li>
<li>right shift: 1100 &gt;&gt; 1 &#x3D;&gt; 0011</li>
</ul>
<p>剛好作業有用到，算是紀錄一下，之後可能也會多少寫一些C的東西這樣。</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 擬態選擇器</title>
    <url>/2022/06/22/css-Pseudo-Class-Selector/</url>
    <content><![CDATA[<p>在css中有種被稱作pesudo class的類別，可以用來做一些互動效果，最常見的就是a link上會用到的hover。而css中要選取pesudo class就要用到pesudo class selector，中文翻作擬態選擇器。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用分號後接上pesudo class的名稱就是pesudo class selector，常見的pesudov class除了hover還有 active、link等等。因為很多就不一一列出，有興趣可以參閱<a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/Pseudo-classes">MDN網站</a></p>
<p>這篇只是介紹最簡單的用法，因為深入的原理等等我還沒學會，如果有機會我會再寫文章來詳細介紹的。</p>
]]></content>
      <categories>
        <category>css selector</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Position: Absolute and Relative</title>
    <url>/2022/07/14/css-absolute-and-relative/</url>
    <content><![CDATA[<p>這兩個屬性通常會一起出現，所以這邊把他們放在一起介紹，讓我們先從absolute開始看起。</p>
<h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>absolute屬性會讓元素從document flow上移除，講的白話一點，就是網頁上的其他元素會無視這個元素，所以就會出現元素重疊，而這個absolute元素的位置可以透過top、bottom、left、right屬性來設定，這四個屬性的相關介紹可以看<a href="https://huanginch.github.io/2022/07/09/css-position-fixed/">這裡</a></p>
<p>可是他的位置是從哪裡算起的呢？答案是上一層並且有設定position的元素(除了position: static)，如果沒有那就會默認為起始的容器(通常都是body)</p>
<p>以下面這個例子來看(建議以0.25x觀看)，黃色方塊會跑到最底下，因為我將bottom設置為0，同時他上面的父元素並沒有設置position，所以默認會用body來做計算。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="position: absolute " src="https://codepen.io/intHuang/embed/rNdWVRv?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/rNdWVRv">
  position: absolute </a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>這時候如果想讓黃色方塊留在藍色方塊中，又不希望藍色方塊的位置跑掉，就可以使用position: relative</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent-box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child-box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>設置了relative屬性的元素也可以透過top、bottom、right、left四個屬性來設定位置，基本上就與static相同，所以relative可以說是為了absolute而存在的。</p>
<p>從下面的例子就可以看到，我在藍色方塊設置了position: relative; 所以黃色方塊就被固定在藍色方塊的底部。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="position: absolute " src="https://codepen.io/intHuang/embed/BarQNez?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/BarQNez">
  position: absolute </a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>absolute與relative算是很常用在元素內的排版，特別是有圖文的樣式，之前寫作業的時候也有用到，不過一開始我沒想到可以用absolute和relative，還在那邊用background image XD ，下次我就會記得了。</p>
]]></content>
      <categories>
        <category>css position</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: animation on scroll plugin</title>
    <url>/2022/08/26/css-aos/</url>
    <content><![CDATA[<p>為了讓網頁看起來更豐富，很常會讓頁面在滾動時套用動畫，這篇會介紹最簡單達成這個目的的插件-<a href="https://michalsnik.github.io/aos/">animation on scroll library</a>。</p>
<p>AOS插件提供了非常多樣的簡易載入動畫，如果只是要讓網頁呈現簡單的動畫，aos肯定是首選。</p>
<h2 id="載入方法"><a href="#載入方法" class="headerlink" title="載入方法"></a>載入方法</h2><ol>
<li><p>npm、yarn</p>
</li>
<li><p>CDN</p>
</li>
</ol>
<p>css: </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.1/dist/aos.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js: </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/aos@2.3.1/dist/aos.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>在網頁中加入初始化js語法(可以寫在script中或寫在外部的js檔案)。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">AOS</span>.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure></li>
<li>在欲套用動畫的元素上加入對應的動畫函式。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>兩步驟結束，是不是超簡單XD<br>當然也可以自訂動畫時間、動畫函式與滾動次數等等</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-up&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-aos-duration</span>=<span class="string">&quot;3000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-aos</span>=<span class="string">&quot;fade-down&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-aos-easing</span>=<span class="string">&quot;linear&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-aos-duration</span>=<span class="string">&quot;1500&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>套用方式也是只要複製貼上就好，相當簡單。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>之前不知道有這個套件我都手寫jQuery還達不到自己想要的效果，自從知道這個套件後簡單的載入動畫我都改用這個了。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-attachment:fixed on safari</title>
    <url>/2022/08/07/css-background-attachment-fixed-on-safari/</url>
    <content><![CDATA[<p>CSS有一個屬性叫background-attachment:fixed，詳細可以參考<a href="https://huanginch.github.io/2022/07/27/css-background-attachment/">這篇</a>。</p>
<p>不過他有一個很大的問題，就是safari以及一些安卓瀏覽器上不支援。</p>
<p>我原本設計了一個網站，在body上下了一個背景並使用了background-attachment:fixed這個屬性，但卻因為這個理由我沒辦法完整呈現我的背景。</p>
<p>不支援的理由主要是過於耗能，可以參考<a href="https://stackoverflow.com/questions/23236158/how-to-replicate-background-attachment-fixed-on-ios">這篇</a>。</p>
<p>那我能解決的辦法有兩個，一個是不要使用(沒錯，很像廢話，但查到的都是叫我改用scroll)，一個是改成用div以及position:fixed。</p>
<p>我當然是選擇後者，因為我還是希望我的網頁背景有fixed的效果，所以我在我的網頁最上面加上一個div並給他background-image</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;background&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.background</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/background-lg.png&quot;</span>) no-repeat, $secondary;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    -webkit-<span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="attribute">background-position</span>-x: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-position</span>-y: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@include</span> pad &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/background-md.png&quot;</span>);</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">80%</span>;</span><br><span class="line">        <span class="attribute">background-position</span>-x: <span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-attachment</title>
    <url>/2022/07/27/css-background-attachment/</url>
    <content><![CDATA[<p>background-attachment可以設定背景圖片、文字與viewport的關係，有三個屬性。</p>
<h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>背景會被固定在viewport上，意及不管怎麼滾動網頁，背景圖都不會改變。</p>
<h2 id="local"><a href="#local" class="headerlink" title="local"></a>local</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-attachment</span>: local;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外層網頁在滾動的時候內層背景與內文會跟著滾動，滾動內層元素的時候背景與內文也會跟著移動(背景被固定在內文的位置)。</p>
<h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-attachment</span>: scroll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>滾動外層網頁時的效果和local相同，但滾動內層的時候只有內文會滾動，背景圖會被固定在viewport上(背景被固定在元素上)。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ul>
<li>建議使用0.5x觀看</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-attachment" src="https://codepen.io/intHuang/embed/OJvxxGO?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/OJvxxGO">
  background-attachment</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>從上到下分別是fixed、local、scroll，最後一個則是因為有兩張背景圖，所以分別設定了scroll和local兩個屬性，這理想示範的是可以同時為不同背景設定不同屬性。</p>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-clip</title>
    <url>/2022/07/26/css-background-clip/</url>
    <content><![CDATA[<p>background-clip可以設定背景圖片會延伸到哪裡，和origin不同，origin是設定起點，從上次的範例就可以看出來，圖片下方還是會延伸到border底下。</p>
<ul>
<li>上次的範例</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-origin" src="https://codepen.io/intHuang/embed/abYymLa?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/abYymLa">
  background-origin</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>background-clip有四種屬性:</p>
<h2 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-clip</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>border-box會讓圖片延伸到border底下。</p>
<h2 id="padding-box"><a href="#padding-box" class="headerlink" title="padding-box"></a>padding-box</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>padding-box會讓圖片延伸到padding底下，但border底下不會有圖片，會留白。</p>
<h2 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>content不會讓圖片超出content box的範圍，所以如果你的元素有padding和border，這兩個地方都會留白。</p>
<h2 id="text"><a href="#text" class="headerlink" title="text"></a>text</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-clip</span>: text;</span><br><span class="line">	-webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  	<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>text不會讓圖片超出文字的部分，比較像是幫文字填色，但填的是圖片，要特別注意使用時要加上後面兩行，color的用意是避免圖片載入失敗，此時會導致text沒有顏色，加上color以避免這個情況，至於webkit是chrome的寫法，其他瀏覽器要稍微注意語法的支援。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ul>
<li>建議使用0.5x觀看</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-clip" src="https://codepen.io/intHuang/embed/xxWLMbe?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/xxWLMbe">
  background-clip</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-image</title>
    <url>/2022/07/21/css-background-image/</url>
    <content><![CDATA[<p>background-image可以為元素的背景設定圖像，通常是放上外部的圖片，不過除了圖片也能用其他的顏色函式(例如rgba、linear-gradient等)為背景上色，並且可以疊加。</p>
<h2 id="linear-gradient"><a href="#linear-gradient" class="headerlink" title="linear-gradient"></a>linear-gradient</h2><p>linear-gradient函式可以做出顏色漸層，搭配background-image就可以做出以下效果:</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-image: linear-gradient" src="https://codepen.io/intHuang/embed/bGvWajY?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/bGvWajY">
  background-image: linear-gradient</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>設定幾個顏色就會有幾個顏色由上到下依序等分漸層，如果你設定了to left、to right或是to bottom(如box2)，就會從指定的方向漸層(範例中為向左漸層)，如果設定數字，就會在指定的位置才開始出現漸層，以box2為例，紅色我設定為75%，所以從右邊向左邊漸層，到75%的地方才會開始出現漸層，同時也能使用角度來設定方向(如box3)。</p>
<h2 id="圖層疊加"><a href="#圖層疊加" class="headerlink" title="圖層疊加"></a>圖層疊加</h2><p>背景圖片也能疊加，可以圖片與圖片疊，也可以圖片與顏色疊加</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-image" src="https://codepen.io/intHuang/embed/jOzmZWX?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/jOzmZWX">
  background-image</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>他會從最後一個開始，一層一層疊上去。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>通常使用了background-image都還會配合background-position和background-size來調整位置，可以看考上一篇<a href="https://huanginch.github.io/2022/07/20/css-background/">background</a></p>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-origin</title>
    <url>/2022/07/25/css-background-origin/</url>
    <content><![CDATA[<p>background-origin可以設定背景圖片的起點位置，分為以下三種:</p>
<h2 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h2><p>border-box會讓圖片從border正下方開始延伸，意即border會覆蓋在圖片上。</p>
<h2 id="padding-box"><a href="#padding-box" class="headerlink" title="padding-box"></a>padding-box</h2><p>padding-box會讓圖片從padding開始延伸，所以border底下會留白，這個也是background-origin的預設值。</p>
<h2 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h2><p>content-box會讓圖片從content開始延伸，所以border和padding的部分會留白。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="background-origin" src="https://codepen.io/intHuang/embed/abYymLa?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/abYymLa">
  background-origin</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>要注意的是如果沒有下no-repeat，看起來會沒有差別，不過一般來說都會設定no-repeat就是。</p>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-repeat</title>
    <url>/2022/07/22/css-background-repeat/</url>
    <content><![CDATA[<p>當用圖片當作背景圖案填滿元素時，除非刻意事先裁切圖片大小，不然不可能圖片會和元素大小一樣，更何況會有RWD的需求，在不同裝置上元素大小都可能會不同，那這時候圖片無法填滿的地方會怎麼呈現？ CSS會有一個屬性叫做background-repeat，並且預設值為repeat，所以就會出現下面的情況。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="background-repeat" src="https://codepen.io/intHuang/embed/KKoqpPx?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/KKoqpPx">
  background-repeat</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>可以看到圖片用重複出現的方式填滿整個box，那如果不想要重複怎麼辦？ 這時候我們就可以利用background-repeat來做調整。</p>
<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這是預設值，會沿著x軸與y軸重複(意即橫的跟直的方向都會用重複圖片的方式填滿)</p>
<h2 id="repeat-x"><a href="#repeat-x" class="headerlink" title="repeat-x"></a>repeat-x</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只會沿著x軸(橫向)重複圖片，直的方向不會，直的填不滿會留白。</p>
<h2 id="repeat-y"><a href="#repeat-y" class="headerlink" title="repeat-y"></a>repeat-y</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只會沿著y軸(直向)重複圖片，橫的方向不會，橫的填不滿會留白。</p>
<h2 id="no-repeat"><a href="#no-repeat" class="headerlink" title="no-repeat"></a>no-repeat</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不重複任何圖片，填不滿的地方會留白。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>一般來說都會使用no-repeat並搭配background-position和background-size來調整圖片，通常不太會用repeat，又或者只會用到repeat-x來做出色塊重複的效果，單純的repeat或repeat-y很少使用。</p>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background-size</title>
    <url>/2022/07/24/css-background-size/</url>
    <content><![CDATA[<p>background-size顧名思義，可以調整圖片的大小，除了可以用數字來調整外，還包含以下幾個值:</p>
<h2 id="contain"><a href="#contain" class="headerlink" title="contain"></a>contain</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-size</span>: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讓圖片盡可能填滿整個元素，並且用不裁切或擠壓到的方式，如果填不滿就會用repeat的方式填滿(除非你把repeat設為no-repeat，關於repeat可以看<a href="https://huanginch.github.io/2022/07/22/css-background-repeat/">這篇</a>)</p>
<h2 id="cover"><a href="#cover" class="headerlink" title="cover"></a>cover</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把圖片盡量縮小成可以完全塞進去元素的大小，如果圖片會超出去元素，多的部分就會被裁掉。</p>
<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-size</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在不改變圖片的任何屬性的情況下用圖片填滿背景。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="background-size" src="https://codepen.io/intHuang/embed/MWVoRBV?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/MWVoRBV">
  background-size</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>除了以上三個屬性，還可以使用px、%、em等等單位，之後再配合background-position來調整位置，比較常見的作法是使用cover搭配background-posiiotn: center，如此就可以把圖片居中，並顯示出正中間的圖案。</p>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: background</title>
    <url>/2022/07/20/css-background/</url>
    <content><![CDATA[<p>background是用來設定元素背景的屬性，除了常見的直接給予背景一個顏色，也可以給予一張圖片來做為背景，接著就會來介紹背景的各種屬性。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>, <span class="built_in">url</span>(<span class="string">...</span>), ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>background所有屬性的縮寫，關於background的值都可以寫在這裡。<br>在寫的時候可以用 , 分開，用逗號隔開的一段會視為一次設定，後面的會蓋在前面的上面。</p>
<h3 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>為背景設定單一顏色。</p>
<h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">...</span>);</span><br></pre></td></tr></table></figure>

<p>為背景設定圖片，圖片會使用url語法來載入外部的圖片，可以同時載入兩張以上的url，也可以使用linear-gradient和linear-radius。</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/21/css-background-image/">文章傳送門</a></li>
</ul>
<h3 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure>

<p>background-reapet會出現在當背景圖片無法填滿整個元素時，會依照設定的值以重複出現圖片的方式來填滿元素</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/22/css-background-repeat/">文章傳送門</a></li>
</ul>
<h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: top;</span><br></pre></td></tr></table></figure>

<p>可以設定背景圖的位置，可以使用top、bottom、left、right、center、數字、百分比、與各種單位來設定</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/23/background-position/">文章傳送門</a></li>
</ul>
<h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: contain;</span><br></pre></td></tr></table></figure>

<p>一般來說背景圖片不可能剛好符合元素大小，用size可以調整背景圖片的大小與圖片會從哪裡開始延伸。</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/24/css-background-size/">文章傳送門</a></li>
</ul>
<h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: border-box;</span><br></pre></td></tr></table></figure>

<p>可以設定背景圖的起始位置，是從邊界開始算，還是從邊界裡面開始算都可以用這個設定</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/25/css-background-origin/">文章傳送門</a></li>
</ul>
<h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>: border-box;</span><br></pre></td></tr></table></figure>
<p>可以設定背景會延伸到哪裡，延伸到邊界停止、到邊界底下、或是留白，與origin有點相似</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/26/css-background-clip/">文章傳送門</a></li>
</ul>
<h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>: scroll;</span><br></pre></td></tr></table></figure>

<p>設定背景與viewport(滾動畫面時所能看見的範圍)的關係</p>
<ul>
<li><a href="https://huanginch.github.io/2022/07/27/css-background-attachment/">文章傳送門</a></li>
</ul>
]]></content>
      <categories>
        <category>css background</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 區塊元素與行內元素</title>
    <url>/2022/06/08/css-block-and-inline/</url>
    <content><![CDATA[<p>在css中有許多元素，今天來介紹最常見的兩種元素: 區塊元素與行內元素。</p>
<h2 id="區塊元素"><a href="#區塊元素" class="headerlink" title="區塊元素"></a>區塊元素</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: block;</span><br></pre></td></tr></table></figure>
<p>想確認一個標籤預設是不是區塊元素，可以透過chrome瀏覽器的開發者工具觀看。如下圖以h1為例，找到user agent stylesheet就可以看到h1裡面有一行 <strong>display: block;</strong> 這代表了h1為區塊元素。</p>
<p><img src="/../images/pasted-67.png"></p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><p>會盡量佔滿整個版面:<br>如下圖所示，我寫了兩個h1標籤，並為他們的背景加上顏色，可以看到幾乎佔滿了整個版面，有些留白的部分示我為了方便觀看加上的margin(上下各2px)</p>
<p>  <img src="/../images/pasted-66.png"></p>
</li>
<li><p>會另起一行:<br>同上圖，我寫了兩個h1，但他們並沒有排在一起，而是各佔了一行</p>
</li>
</ul>
<h2 id="行內元素"><a href="#行內元素" class="headerlink" title="行內元素"></a>行內元素</h2><h3 id="語法-1"><a href="#語法-1" class="headerlink" title="語法"></a>語法</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline;</span><br></pre></td></tr></table></figure>

<h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ul>
<li><p>常用於p段落內: <br>和區塊元素不同，行內元素會如下圖所示，這裡我使用了兩個a標籤，可以看到他跟h1不同，並不會另起一行，也不會佔滿整個版面，所以很常被拿來在p段落裡面使用。<br><img src="/../images/pasted-68.png"></p>
</li>
<li><p>無法設定寬高:<br>不論你增加多少寬高給行內元素，他都不會有任何改變，如果希望行內元素能夠有寬高，就要將它改成區塊元素，可以用display:block;來達成。</p>
</li>
</ul>
<p>這篇介紹差不多到這，還有其他的常用元素，以後也會找機會介紹。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: border-box</title>
    <url>/2022/06/23/css-box-sizing-border-box/</url>
    <content><![CDATA[<p>在css中常常要自己去計算padding、margin等等的推擠造成的盒模型大小不同，所以css有提供一個叫border-box的方法讓你不用去計算。</p>
<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>這個就是用來選擇是否使用border-box，不修改的話預設會是content-box。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h2><p>想要使用border-box只需要把content-box做修改即可</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="套用到所有元素"><a href="#套用到所有元素" class="headerlink" title="套用到所有元素"></a>套用到所有元素</h2><p>因為border-box很方便，所以開發者通常會希望一次都套用到所有元素上，這時候就可以這樣寫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*, </span><br><span class="line">*::before, </span><br><span class="line">*::after&#123;</span><br><span class="line">	box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣所有元素都會吃到border-box，* 代表全部，至於before和after就是擬態選擇器中有稍微提到的pesudo class，這部分以後會一起介紹。</p>
<p>其實我之前切版都沒有使用到，下次應該會來試試，這樣我就不用自己計算推擠了。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS:類別與ID選擇器比較</title>
    <url>/2022/07/04/css-cmp-class-and-id-selector/</url>
    <content><![CDATA[<p>在<a href="https://huanginch.github.io/2022/07/03/css-tag-class-and-id-selector/">上一篇</a>介紹了類別與ID選擇器，但什麼時候要用類別選擇器，什麼時候要用ID選擇器？這篇就會針對這兩個相似的選擇器做個比較。</p>
<h2 id="比較表格"><a href="#比較表格" class="headerlink" title="比較表格"></a>比較表格</h2><table>
<thead>
<tr>
<th>比較項目\選擇器</th>
<th>類別選擇器</th>
<th>ID選擇器</th>
</tr>
</thead>
<tbody><tr>
<td>寫法</td>
<td><code>.classname&#123;...&#125;</code></td>
<td><code>#IDname&#123;...&#125;</code></td>
</tr>
<tr>
<td>選擇對象</td>
<td>會選擇有所有相符class的元素</td>
<td>只會選擇第一個有相符ID的元素</td>
</tr>
<tr>
<td>使用次數</td>
<td>可重複使用</td>
<td>一個頁面只能使用一次</td>
</tr>
<tr>
<td>與css或html的關聯</td>
<td>只能用來標記元素並為他加上樣式</td>
<td>可能會與html有關(比如說內頁跳轉連結)</td>
</tr>
<tr>
<td>使用時機</td>
<td>一般情況都會選擇使用</td>
<td>特定時機才會使用</td>
</tr>
</tbody></table>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>一般情況下盡量使用類別選擇器，因為類別選擇器就是為了css styling而設計的，ID的意義主要還是在html上(比如說跳到某個段落，舉個例子點這個<a href="https://huanginch.github.io/2022/07/04/css-cmp-class-and-id-selector/#%E6%AF%94%E8%BC%83%E8%A1%A8%E6%A0%BC">連結</a>可以跳到比較表格，你可以看到網址上多了#比較表格，這就是ID最大的用途)，當然在有需要的情況下還是可以使用ID選擇器，但不要只是為了幫元素加點樣式就使用ID選擇器。</p>
]]></content>
      <categories>
        <category>css selector</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: color</title>
    <url>/2022/08/08/css-color/</url>
    <content><![CDATA[<p>CSS中有一個屬性可以改變文字的顏色，就是color。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>color後面可以接顏色色碼(16進制)、rgb function和rgba function，其中rgba是包含透明度。</p>
<p>要注意新手一開始會有點跟背景色搞混，這個是幫文字更改顏色，background-color是整個元素的背景色。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 關係選擇器</title>
    <url>/2022/06/29/css-combinator-selector/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Combinator Selectors，中文稱作關係選擇器，可以用來選擇不同的html標籤，之前也有寫過一篇後代選擇器就是關係選擇器的其中一種，但因為內容會重複所以我決定把之前那篇刪掉，只留下這篇。</p>
<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>關係選擇器一共有四種，分別為後代選擇器(Descendant Selector)、子代關係選擇器(Child Selector)、鄰接兄弟選擇器(Adjacent Sibling Selector)、通用兄弟選擇器(General Sibling Selector)，讓我們來一一介紹。</p>
<h3 id="後代選擇器-Descendant-Selector"><a href="#後代選擇器-Descendant-Selector" class="headerlink" title="後代選擇器(Descendant Selector)"></a>後代選擇器(Descendant Selector)</h3><h4 id="以空格隔開"><a href="#以空格隔開" class="headerlink" title="以空格隔開"></a>以空格隔開</h4><ul>
<li><p>語法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>例子</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="css descendant selector" src="https://codepen.io/intHuang/embed/jOzOxxX?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/jOzOxxX">
  css descendant selector</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>顧名思義，就是可以選擇標籤的後代(被包在某標籤內的都是該標籤後代)來制定css規則，像我範例中想對div中的h2修改字型，我就使用了後代選擇器，可以看見被修改到的只有div中的h2，因為只有div中的h2才是div的後代。</p>
</li>
</ul>
<h3 id="子代關係選擇器-Child-Selector"><a href="#子代關係選擇器-Child-Selector" class="headerlink" title="子代關係選擇器(Child Selector)"></a>子代關係選擇器(Child Selector)</h3><h4 id="以-gt-隔開"><a href="#以-gt-隔開" class="headerlink" title="以 &gt; 隔開"></a>以 &gt; 隔開</h4><ul>
<li><p>語法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="css descendant selector" src="https://codepen.io/intHuang/embed/MWVWGqM?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/MWVWGqM">
  css descendant selector</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>和後代選擇器很相似，不同的是，這裡只會選擇子代。什麼是子代? 剛剛前面提到後代是包在該標籤內的所有標籤，子代則是只有第一層(只縮一次排)，從上面的範例可以看到我只選擇到了Sub Title的h2，div外的以及li內的都沒有選到，因為只有Sub Title是div的子代，li的稱為孫代(想成爸爸孩子孫子的感覺)</p>
</li>
</ul>
<h3 id="鄰接兄弟選擇器-Adjacent-Sibling-Selector"><a href="#鄰接兄弟選擇器-Adjacent-Sibling-Selector" class="headerlink" title="鄰接兄弟選擇器(Adjacent Sibling Selector)"></a>鄰接兄弟選擇器(Adjacent Sibling Selector)</h3><h4 id="以-隔開"><a href="#以-隔開" class="headerlink" title="以 + 隔開"></a>以 + 隔開</h4><ul>
<li><p>語法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> + <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="css child selector" src="https://codepen.io/intHuang/embed/YzazLdx?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/YzazLdx">
  css child selector</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>  剛剛前面解釋了後代，那這邊使用了兄弟應該也很明顯，指的是同一層(縮排相同)的元素，從範例中可以看到選擇了h2的兄弟p，li中的p並沒有被選取，因為他並不是任何一個h2的兄弟。值得注意的是，這邊只會往下選取不會往上，所以第一個p也沒有被選取。<br>那你可能想問，那個鄰接是什麼意思？很簡單，意思是只會找鄰居，所以你也可以發現同樣是兄弟的第四個p並沒有被選取到，因為他不是任何h2的鄰居。</p>
</li>
</ul>
<h3 id="通用兄弟選擇器-General-Sibling-Selector"><a href="#通用兄弟選擇器-General-Sibling-Selector" class="headerlink" title="通用兄弟選擇器(General Sibling Selector)"></a>通用兄弟選擇器(General Sibling Selector)</h3><h4 id="以-隔開-1"><a href="#以-隔開-1" class="headerlink" title="以 ~ 隔開"></a>以 ~ 隔開</h4><ul>
<li><p>語法:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> ~ <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>例子</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="css adjacent sibling selector " src="https://codepen.io/intHuang/embed/VwXwxoM?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/VwXwxoM">
  css adjacent sibling selector </a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>和鄰接兄弟選擇器很相似，同樣是選擇兄弟，最大的不同是不論是否為鄰居都會選擇到，所以剛剛沒被選擇到的第四個p以及h3底下的p這次都被選擇到了。</p>
</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>我自己最常用到的還是後代選擇器，其他的我比較少用，會找機會來練習看看。</p>
]]></content>
      <categories>
        <category>css selector</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: em 與 rem</title>
    <url>/2022/08/15/css-em-and-rem/</url>
    <content><![CDATA[<p>我們平常寫網頁使用的單位是px，不過px是絕對單位，如果使用者改變預設字體大小，使用px單位的元素將不會跟著改變，這時候就會使用em或者rem這兩個相對單位。</p>
<h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><p>em的計算方式是看父層元素的大小再乘上給予的係數，比如我將某個p段落的font-size設定成1.5em，如果父層元素的font-size是16px，那這個p段落的font-size就會是24px。</p>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>rem的r代表的是root，所以會根據root的大小改變，一般瀏覽器預設字體大小都是16px，所以我任何文字的font-size設定成1.5rem都會是24px。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>em與rem不只會用於文字上，margin、padding等等有時也會使用em與rem，不過border、shadow、border-radius並不會使用em或rem，還是會使用px。</p>
<p>一般來說會使用的都是rem，因為rem是根據root來設定，em在計算上面較不方便。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS:float</title>
    <url>/2022/07/07/css-float/</url>
    <content><![CDATA[<p>float是一種可以讓元素漂移的屬性，用法很像word中常用的文繞圖，所以float也比較常應用在文字與圖片的排版，元素與元素間還是比較常使用flex box。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><ol>
<li><p>none:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: none:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 不使用float，預設也是這個。</p>
</li>
<li><p>right</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="float practice" src="https://codepen.io/intHuang/embed/MWVKBRj?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/MWVKBRj">
  float practice</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
(推薦使用0.5x觀看)
可以看到圖片會飄到右邊，文字則是繞著圖片下來。
</li>
<li><p>left</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="float right" src="https://codepen.io/intHuang/embed/LYdGJYm?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/LYdGJYm">
  float right</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
(推薦使用0.5x觀看)
可以看到圖片會飄到左邊，文字和right一樣繞著圖片下來。
</li>
<li><p>inline-start</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="float left" src="https://codepen.io/intHuang/embed/mdxVGyo?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/mdxVGyo">
  float left</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe></li>
</ol>
<p>元素會從容器的開頭，也就是上一個元素的最左邊開始延伸。</p>
<ol start="5">
<li>inline-end<iframe height="300" style="width: 100%;" scrolling="no" title="float inline-start" src="https://codepen.io/intHuang/embed/KKoVxNN?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/KKoVxNN">
  float inline-start</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe></li>
</ol>
<p>元素會從容器的結尾，也就是上一個元素的最右邊開始延伸。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>其實inline-start跟inline-end看起來根本一樣，我還是有點搞不清楚它們差在哪裡，試了不同的排版方式他們看起來還是一樣，如果有人知道他們到底差在哪裡希望可以告訴我。</p>
]]></content>
      <categories>
        <category>css position</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: !important</title>
    <url>/2022/07/05/css-important/</url>
    <content><![CDATA[<p>css中有一個特別的語法叫做 !important，他可以無視任何權重，任何規則都無法覆蓋加上!important的條件。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><p>在某個條件最後方加上!important即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不推薦使用"><a href="#不推薦使用" class="headerlink" title="不推薦使用"></a>不推薦使用</h2><p>但開發中並不推薦使用!important，因為他會讓你的程式碼無視權重，變得更難維護，你可能要在千萬行程式碼中找到!important才知道為什麼你新下的規則蓋不掉，當然在某些特定情況下還是可以用，比如說你不希望任何一條規則覆蓋掉某個特定條件，但最好還是乖乖用權重來算就好。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS介紹</title>
    <url>/2022/06/28/css-intro/</url>
    <content><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>CSS，全名 Cascading Style Sheet，中文叫做階層式樣式表，是用來為網頁增加各種樣式，包括顏色、字體、排版等等，至於所謂的階層式代表著對同一個html元素可以增加不同的樣式規則，最後會顯示在網頁上的樣式則是由css的權重來決定。</p>
<h2 id="歷史"><a href="#歷史" class="headerlink" title="歷史"></a>歷史</h2><p>css目前為止有三個版本，第一版出現於1996年，1998年推出第二版，同時也開始了css3的開發，也是我們目前正在使用的版本，時至今日css3依舊在開發中。至於未來會不會有css4，答案是否定的，因為有別於前兩版，css3的概念整個被翻新，他將各項功能模組化，所以未來只會有各種模組功能的更新，這也使得css的開發更加有彈性。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>想在html中使用css有三種方法</p>
<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>第一種是直接寫在html tag裡面，但就開發和維護上並不推薦這種做法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="style-tag"><a href="#style-tag" class="headerlink" title="style tag"></a>style tag</h3><p>第二種一樣是寫在html裡面，但是會包在style tag裡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">  	<span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="另外寫一個檔案"><a href="#另外寫一個檔案" class="headerlink" title="另外寫一個檔案"></a>另外寫一個檔案</h3><p>就開發上來說，這個方法是最推薦的，因為方便維護，基本上除非用vue之類的框架，不然都會選擇這種方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>uHost<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;main.css&quot;</span>&gt;</span> <span class="comment">&lt;!--加上自己寫的css file的link--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;product-overview&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Get the freedom you deserve.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;plans&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;section-title&quot;</span>&gt;</span>Choose Your Plan<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Make sure you get the most for your money!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用codepen來示範會長這樣，html和css是不同檔案</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Day2 - 移除圖片空隙" src="https://codepen.io/intHuang/embed/ZExEzPJ?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/ZExEzPJ">
  Day2 - 移除圖片空隙</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>之前寫了很多篇css的用法，但好像都沒有從頭開始介紹，才會有這篇，之後也會寫其他的用法，像是權重的比較之類。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 盒模型</title>
    <url>/2022/06/30/css-box-model/</url>
    <content><![CDATA[<p>說到css就不能不提他最重要的觀念-盒模型(box model)，在css眼中，所有元素都是以盒模型方式呈現。盒模型由以下幾種東西組成: 內容(content)、內邊距(padding)、邊界線(border)、外邊距(margin)。</p>
<p><img src="/../images/pasted-82.png" alt="box-model"></p>
<ul>
<li>Chrome 開發者工具中的盒模型(打開開發者工具後拉到style最下面可以看到當前選取元素的盒模型)</li>
</ul>
<p>知道盒模型長什麼樣子之後，那他到底是來幹嘛的? 簡單來說，它可以用來推算元素在網頁上佔的位置大小，方便我們對元素做排版，接著我會一一介紹盒模型的四個組成要件。</p>
<h2 id="內容-Content"><a href="#內容-Content" class="headerlink" title="內容(Content)"></a>內容(Content)</h2><p>內容就是元素內容，img就是圖片，p段落就是文字等等，任何你真正想在網頁上呈現的東西。</p>
<h2 id="內邊距-Padding"><a href="#內邊距-Padding" class="headerlink" title="內邊距(Padding)"></a>內邊距(Padding)</h2><p>內邊距是在元素內產生的留白，分為上下左右，可針對不同方向產生不同推擠，方向上來說是從邊界線開始項內容推。</p>
<p><img src="/../images/pasted-86.png" alt="padding"></p>
<h2 id="邊界線-Border"><a href="#邊界線-Border" class="headerlink" title="邊界線(Border)"></a>邊界線(Border)</h2><p>元素最外層的界線，邊界線除了讓我們方便分清楚元素與元素之間的界線外，也可以用來當裝飾。因為邊界線也會有大小，自然會算進去盒模型的大小中，同樣分為上下左右四個方向。</p>
<h2 id="外邊距-Margin"><a href="#外邊距-Margin" class="headerlink" title="外邊距(Margin)"></a>外邊距(Margin)</h2><p>和padding相反，margin是元素外產生的留白，從邊界線開始由內而外推擠，同樣分為上下左右四個方向。</p>
<p><img src="/../images/pasted-84.png" alt="margin"></p>
<h2 id="元素大小計算"><a href="#元素大小計算" class="headerlink" title="元素大小計算"></a>元素大小計算</h2><p>那知道了盒模型是由什麼組成之後就可以來計算元素的大小了，一般來說我們都會認為元素的大小只有content大小，但如果有加上padding和border就會跟這一起算進去。</p>
<p><img src="/../images/pasted-87.png" alt="包含padding和border的和模型範例"></p>
<p>以這張圖來說，元素的寬會是內容的24+左右兩邊的border，所以是24+1+1 &#x3D; 26，長度則是225.875 + 22 + 22 + 1 + 1 &#x3D; 271.875。<br>你可能會想問，那margin呢？ 不用算嗎？沒錯，margin並不算在元素的大小上，但是仍然會在網頁上留下空間，所以在寫的時候要特別注意。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>盒模型基本上是css的核心概念，要學好css一定要學好盒模型，當然你會覺得每次都要自己計算很麻煩，所以css也有提供其他方法，像是我之前寫過的<a href="https://huanginch.github.io/2022/06/23/css-box-sizing-border-box/">border-box</a>，基本上開發時都會使用borderbox來省下計算盒模型的推擠，相當方便。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: font</title>
    <url>/2022/07/28/css-font/</url>
    <content><![CDATA[<p>字型在網頁設計中是必不可少的一部份，這篇會來簡單介紹字型的屬性以及一些注意事項。</p>
<h2 id="預設字體"><a href="#預設字體" class="headerlink" title="預設字體"></a>預設字體</h2><p>每種作業系統與瀏覽器都有自己的預設字體，這裡主要介紹Windows和Mac，因為這兩種作業系統在PC上的市佔率最高。</p>
<ul>
<li><p>Windows: 常用中文字體有三種:新細明體(預設)、微軟正黑體、標楷體。英文有一種: Segoe UI。要特別注意雖然windows預設是新細明體，但在網頁設計上都會改成使用較好閱讀的微軟正黑，新細明體字體太細不適合閱讀，算是windows小雷的地方。</p>
</li>
<li><p>Mac: 中文: 蘋方(預設)</p>
</li>
</ul>
<p>其他系統預設英文字體可以參考<a href="https://css-tricks.com/snippets/css/system-font-stack/">這篇</a></p>
<p>在讀設計稿時常常會遇到一個問題: 設計師用Mac&#x2F;Windows內建字體設計，我的電腦沒有那個字體怎麼辦，這時候只要使用你的系統的預設字體即可，比如windows就用微軟正黑，Mac就用蘋方。</p>
<h2 id="在css中載入字型"><a href="#在css中載入字型" class="headerlink" title="在css中載入字型"></a>在css中載入字型</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: 第一種字形, 第二種字形, <span class="string">&quot;第三 種字形&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想要在css中載入內建字體可以使用font-family，瀏覽器會從第一種字形開始套用，找不到就會套用第二種，以此類推，一般來說直接把字形名稱寫上去就好了，但如果遇到字體名稱有空格或無法載入就要加上單引號或雙引號。</p>
<h2 id="載入外部字體"><a href="#載入外部字體" class="headerlink" title="載入外部字體"></a>載入外部字體</h2><p>除了作業系統內建的字體我們也可以載入外部字體，最常用的就是Google Fonts，因為這樣就沒有跨作業系統而缺字體的問題。</p>
<p>一般來說中文會使用Noto Sans TC，這是Google與Adobe共同開發的開源字體，英文則會使用Roboto。<br>載入詳細步驟可以參考<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/HJpJk8ABU/https%3A%2F%2Fhackmd.io%2F2nenMilfR7WSJSDI4WzcWA%3Fview">這篇</a></p>
<h2 id="字重"><a href="#字重" class="headerlink" title="字重"></a>字重</h2><p>font還有一個屬性叫做font-weight，可以調整字體的粗細，可以細分為100、200…到900這幾種，不過要注意有些字體只有支援少數幾種字重，比如說微軟正黑只有Light(100)、Normal(400)、Bold(900)三種，所以大家才會選擇使用Google Fonts的Noto Sans TC，因為他支援100~900的字重。</p>
<p>在觀看設計稿時也要特別注意設計師設計的字重，常見的有Medium、Regular(Normal)、Bold，Normal是預設，Medium與Bold轉換成數字分別對應到500與900。</p>
<p>更多關於字重的介紹可以看<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight">這篇</a></p>
<h2 id="從Chrome開發人員工具觀看是否套用成功"><a href="#從Chrome開發人員工具觀看是否套用成功" class="headerlink" title="從Chrome開發人員工具觀看是否套用成功"></a>從Chrome開發人員工具觀看是否套用成功</h2><p>Chrome提供了非常強大的網頁開發工具，我們在自己撰寫網頁時可以用這個工具來看各種檔案的屬性與載入成功與否等等，這裡會介紹如何觀看字型是否套用成功。</p>
<p>以這個例子來說，這是我自己撰寫的網站，我在英文字體的部分套用了Roboto字體，打開工具後我選取了Functional這個英文。</p>
<p><img src="/../images/pasted-89.png" alt="chrome ex"></p>
<p>選取後點擊右下角的Computed，之後拉到最下面有一個Rendered Fonts。</p>
<p><img src="/../images/pasted-90.png" alt="Computed"></p>
<p>上面會看到我現在使用的字體與字重(這裡是Roboto Medium)</p>
<p><img src="/../images/pasted-91.png" alt="Rendered Fonts"></p>
<h2 id="css懶人包"><a href="#css懶人包" class="headerlink" title="css懶人包"></a>css懶人包</h2><p>這個懶人包包含了所有常見預設字體，依序為Mac-&gt;Windows-&gt;Android-&gt;IOS-&gt;通用字體，其中Arial與sans-serif為最常見也最多瀏覽器支援的字體，如果不想特別設計字體可以使用這個懶人包。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, Roboto, <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: animation and @keyframe</title>
    <url>/2022/08/24/css-keyframe/</url>
    <content><![CDATA[<p>CSS提供了許多語法來做動畫，這裡要介紹的是@keyframe這個關鍵字，可以針對元素來做一連串的動畫。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><p>首先要在@keyframe關鍵字後面為自己的動畫做命名，到時候套用到元素上時會使用。@keyframe的語法有幾種，可以針對秒數來切割動畫效果，或是直接一次到底。</p>
<ul>
<li>from、to</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframe</span> myAnimation &#123;</span><br><span class="line">	<span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個寫法元素就可以直接最左邊移動到最右邊</p>
<ul>
<li>針對秒數細分</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myAnimation &#123;</span><br><span class="line">  <span class="number">0%</span>   &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">  <span class="number">25%</span>  &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">  <span class="number">50%</span>  &#123;<span class="attribute">top</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">  <span class="number">75%</span>  &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">  <span class="number">100%</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這個寫法會將動畫持續時間切割成100等分，到達指定%數時會執行對應的動畫。假設動畫持續時間設定為4秒，那第0秒時會在top: 0px的位置，第一秒時(4*0.25)會移動到top: 200px的地方，依此類推</p>
<h2 id="套用到元素上"><a href="#套用到元素上" class="headerlink" title="套用到元素上"></a>套用到元素上</h2><p>要讓元素使用我們用@keyframe設定的動畫就要使用<code>animation</code>語法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myAnimation &#123;</span><br><span class="line">  <span class="number">0%</span>   &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">  <span class="number">25%</span>  &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">  <span class="number">50%</span>  &#123;<span class="attribute">top</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">  <span class="number">75%</span>  &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">  <span class="number">100%</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">animation</span>: myAnimation <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>aniamtion也如同background、border等等，有多種屬性，並且可以合併成一個屬性。</p>
<ul>
<li>animation-name: 欲套用的@keyframe動畫名稱。</li>
<li>aniamtion-duration: 動畫持續時間。</li>
<li>aniamtion-duration-function: 動畫函式，css有寫好一些動畫函式，或是可以自己撰寫，可以參考<a href="https://huanginch.github.io/2022/08/17/CSS-transition/">轉場動畫</a>。</li>
<li>animation-delay: 動畫延遲時間。</li>
<li>animation-iteration-count: 動畫重複次數，也可以使用infinite讓他永遠持續下去。</li>
<li>animation-direction: 動畫的方向。</li>
<li>animation-fill-mode: 動畫最後會停在哪格。</li>
<li>animation-play-state: 動畫的播放狀態，有paused和running兩個屬性。</li>
</ul>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="Day 42-練習 keyframes" src="https://codepen.io/intHuang/embed/qBovwdE?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/qBovwdE">
  Day 42-練習 keyframes</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Margin 、 Padding與Border 的寫法與縮寫</title>
    <url>/2022/07/01/css-margin-and-padding-shorthand/</url>
    <content><![CDATA[<p>在<a href="https://huanginch.github.io/2022/06/30/css-box-model/">上一篇盒模型</a>介紹了margin、padding和border，所以這篇會來介紹在css中的寫法。</p>
<h2 id="Marign"><a href="#Marign" class="headerlink" title="Marign"></a>Marign</h2><p>在上一篇中有提到margin有分上下左右，所以寫法也有分上下左右。</p>
<h3 id="全部相同寬度"><a href="#全部相同寬度" class="headerlink" title="全部相同寬度"></a>全部相同寬度</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="個別設定"><a href="#個別設定" class="headerlink" title="個別設定"></a>個別設定</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h3><p>你可能會想說，這樣我要設定只有一邊不同不就很麻煩嗎？所以css有提供縮寫寫法:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">8px</span> <span class="number">10px</span> <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上從左到右分別為上、右、下、左</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上從左到右為上和下、左和右</p>
<h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>padding的寫法跟margin很像</p>
<h3 id="全部相同寬度-1"><a href="#全部相同寬度-1" class="headerlink" title="全部相同寬度"></a>全部相同寬度</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="個別設定-1"><a href="#個別設定-1" class="headerlink" title="個別設定"></a>個別設定</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="縮寫-1"><a href="#縮寫-1" class="headerlink" title="縮寫"></a>縮寫</h3><p>和margin一樣，padding也有縮寫寫法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">8px</span> <span class="number">10px</span> <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上依序為上、右、下、左</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上依序為上和下、左和右</p>
<h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p>border的位置設定也和margin、padding一樣，不同的是border可以設定樣式、顏色、寬度等等</p>
<h3 id="個別設定-2"><a href="#個別設定-2" class="headerlink" title="個別設定"></a>個別設定</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-top-style</span>: solid;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="縮寫-2"><a href="#縮寫-2" class="headerlink" title="縮寫"></a>縮寫</h3><h4 id="全部相同"><a href="#全部相同" class="headerlink" title="全部相同"></a>全部相同</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上順序可以調換</p>
<h4 id="個別設定-3"><a href="#個別設定-3" class="headerlink" title="個別設定"></a>個別設定</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">3px</span> dotted <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上順序可以調換</p>
<p>個人覺得有縮寫真的很方便，之前不知道有縮寫的時候還笨笨的一個一個寫，code變有夠長的，自從學會了縮寫整個世界都不一樣了呢XD</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Max-width and min-width</title>
    <url>/2022/07/18/css-max-width-and-min-width/</url>
    <content><![CDATA[<p>max-width和min-width可以為元素設定最大寬度與最小寬度，讓元素的寬度不會被width的值所限制。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">	<span class="attribute">max-width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">	<span class="attribute">min-width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="max-width"><a href="#max-width" class="headerlink" title="max-width"></a>max-width</h2><p>元素的寬度不會超過max-width所設定的值</p>
<h2 id="min-width"><a href="#min-width" class="headerlink" title="min-width"></a>min-width</h2><p>元素的寬度不會小於min-width所設定的值</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這幾次寫作業為了讓寬度達到跟設計稿相同高度很常使用到max-width，一來是寬度最大就是那樣，二來會有簡易的RWD，相當好用。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 邊界重疊(Margin Collapse)</title>
    <url>/2022/07/02/css-margin-collapse/</url>
    <content><![CDATA[<p>在<a href="https://huanginch.github.io/2022/06/30/css-box-model/">盒模型篇</a>有介紹了margin，這篇會來介紹在使用margin時會遇到的問題:邊界重疊</p>
<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>所謂邊界重疊，是發生在相連的元素之間如果都有寫上margin推擠，可能會導致重疊，舉個例子:</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/abYOmqg?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/abYOmqg">
  Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>可以看到我用了top: 25px, bottom: 15px，照理來說兩個box之間的距離應該要是25+15 &#x3D; 40px，但這裡看起來的距離只有25px，這就是所謂的邊界重疊(margin collapse)，上下邊界會重疊，並由較大的覆蓋較小的，這並不是什麼bug，當初設計時就是這樣設計的。</p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>如果你不希望發生邊界重疊，試著使用padding達到相同視覺效果，當然還有其他方法，可以參考<a href="https://ithelp.ithome.com.tw/articles/10219975">這篇</a>，不過最推薦的方法還是使用padding。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>會發生margin collapse的似乎不只是兄弟元素，父子之間也會，但我目前還沒有研究過，之後等我了解了會再來編輯文章。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Overflow</title>
    <url>/2022/07/19/css-overflow/</url>
    <content><![CDATA[<p>有時候會有元素太大導致超出父元素的問題，這就叫做overflow(特別容易發生在有設定高度的元素中)，以下面為例:</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="css:overflow" src="https://codepen.io/intHuang/embed/qBormgx?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/qBormgx">
  css:overflow</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>可以看到文字超出了parent</p>
<p>通常的作法是不設定高度，讓元素按照內容去伸展高度，但如果說我今天就是希望這個元素這麼高，這時候就可以使用overflow這個屬性</p>
<h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><ul>
<li>visible</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">overflow</span>: visibile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>預設值，呈現效果等同上面的例子。</p>
<ul>
<li>hidden</li>
</ul>
<p>將overflow的元素藏起來</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">box&#123;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="300" style="width: 100%;" scrolling="no" title="css:overflow" src="https://codepen.io/intHuang/embed/mdxWmov?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/mdxWmov">
  css:overflow</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>可以看到多餘的部分都消失在元素內了。</p>
<ul>
<li>scroll</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<iframe height="300" style="width: 100%;" scrolling="no" title="css:overflow: hidden" src="https://codepen.io/intHuang/embed/rNdymbm?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/rNdymbm">
  css:overflow: hidden</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>讓子元素保持在父元素內，可以用上下左右滾動的方式看到超過的部分。</p>
<ul>
<li>auto、overlay<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="css:overflow: auto" src="https://codepen.io/intHuang/embed/LYdWyvm?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/LYdWyvm">
  css:overflow: auto</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>讓子元素保持在父元素內，和scroll不同，只能用上下滾動的方式看到超過的部分。<br>而overlay和auto相同，只是不同瀏覽器支援不同語法。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Position: fixed</title>
    <url>/2022/07/09/css-position-fixed/</url>
    <content><![CDATA[<p>很常會看到有些網頁的NavBar會跟著畫面滾動並停留在最上方，並不會因為畫面向下拉而消失，又或者是有些在最左下角的回頂端(如圖)</p>
<p><img src="/../images/pasted-88.png" alt="蝦皮回頂端按鈕"></p>
<p>想要實現這種功能就必須使用到 position: fixed</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="舉例"><a href="#舉例" class="headerlink" title="舉例"></a>舉例</h3><iframe height="300" style="width: 100%;" scrolling="no" title="position: fixed" src="https://codepen.io/intHuang/embed/MWVyqmb?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/MWVyqmb">
  position: fixed</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>在上面的codepen中可以看到我在navbar中下了position:fixed;，所以當你滾動畫面時粉紅色navbar會一直固定在畫面上。</p>
<h3 id="top-bottom-left-和-right"><a href="#top-bottom-left-和-right" class="headerlink" title="top bottom left 和 right"></a>top bottom left 和 right</h3><p>但要注意，只寫position:fixed並不能將navbar固定在畫面最上方，你可以自己試試看，會發現他和上面有一些距離，所以這時候就要使用top。</p>
<p>透過top、bottom、left和right可以設定fixed元素的位置，以上面的codepen例子來說，top: 0;指的就是距離畫面頂端為0，所以會固定在畫面最上方，同理將其他值設成0就會與左邊右邊或底部沒有距離。</p>
<p>當然也可以設置成別的數值，px就是距離那個屬性的位置有幾個px，設定成%的話，假設是top:50%; 就會固定在由頂端往下50%的地方。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>fixed可以製作navbar等會固定在畫面上的元素，與fixed相似的還有sticky和relative，關於他們可以參考我的其他篇文章。</p>
]]></content>
      <categories>
        <category>css position</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: position:sticky</title>
    <url>/2022/07/13/css-position-sticky/</url>
    <content><![CDATA[<p>sticky像是結合了fixed和relative，有position: sticky的元素會像fixed一樣被固定在畫面上，但並不會超出父元素，一旦父元素超出畫面，sticky元素也會跟著消失在畫面上。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: sticky</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="position: sticky" src="https://codepen.io/intHuang/embed/LYdRqXa?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/LYdRqXa">
  position: sticky</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>從範例中可以看到第二個sticky-box一旦碰到橘色的部分(另一個div)就不會固定在畫面上，而是會消失，至於sticky-box的位置，一樣可以透過top、bottom、left、right來控制，這部分在position: fixed有介紹過，用法是相同的。(<a href="https://huanginch.github.io/2022/07/09/css-position-fixed/">傳送門</a>)</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>sticky雖然好用，但要注意他是比較新的語法，部分瀏覽器可能無法支援(特別是IE)，可以透過<a href="https://caniuse.com/?search=sticky">caniuse</a>來查詢是否支援。</p>
]]></content>
      <categories>
        <category>css position</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: position</title>
    <url>/2022/07/08/css-position/</url>
    <content><![CDATA[<p>position可以用來安排元素的位置，包含讓他們重疊或固定於網頁某個地方都能用position來實現，這篇會來介紹position的各種值以及和position相關的其他屬性。</p>
<p>不過因為有些屬性內容比較多我會改成用連結文章的方式，並且之後這幾天都會寫和positon相關的主題，之後再彙整過來。</p>
<h2 id="position屬性"><a href="#position屬性" class="headerlink" title="position屬性"></a>position屬性</h2><ol>
<li><p>static: </p>
<ul>
<li>預設值，在static上不會有任何元素重疊。 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>absolute、relative:</p>
<ul>
<li>這兩個雖然分別是不同屬性但基本上都會一起使用。</li>
<li><a href="https://huanginch.github.io/2022/07/14/css-absolute-and-relative/">介紹文章傳送門</a> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent-box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child-box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>fixed:</p>
<ul>
<li>可以將元素固定在網頁上，不論如何滑動頁面元素都不會消失。</li>
<li><a href="https://huanginch.github.io/2022/07/09/css-position-fixed/">介紹文章傳送門</a> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>sticky</p>
<ul>
<li>sticky比較像fixed + relative，可以讓子元素固定在畫面上，滾動時又不會超出父元素。</li>
<li><a href="https://huanginch.github.io/2022/07/13/css-position-sticky/">介紹文章傳送門</a>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: sticky;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="其他元素定位相關屬性"><a href="#其他元素定位相關屬性" class="headerlink" title="其他元素定位相關屬性"></a>其他元素定位相關屬性</h2><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><ul>
<li>常用於文字與圖片，可做出文繞圖的樣式。</li>
<li><a href="https://huanginch.github.io/2022/07/07/css-float/">介紹文章傳送門</a></li>
</ul>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><ul>
<li>可調整網頁z軸(也就是圖片與元素的重疊和上下關係)</li>
<li><a href="https://huanginch.github.io/2022/07/12/css-z-index/">介紹文章傳送門</a></li>
</ul>
]]></content>
      <categories>
        <category>css position</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Reset</title>
    <url>/2022/06/12/css-reset/</url>
    <content><![CDATA[<p>在各大瀏覽器中，其實他們都有自己預設的css style，所以就算你不下css，你的HTML用瀏覽器打開時還是會有一些基本的css設定，但這些設定會因瀏覽器的不同而不同，為了讓你的網頁在不同瀏覽器都能有相同的css，就必須使用到css reset。</p>
<p>要使用css reset很簡單，最常見的做法就是去google搜尋css reset，就會有一堆網站跑出來給你複製code，比如說<a href="https://meyerweb.com/eric/tools/css/reset/">這個</a>，你就可以將程式碼複製貼上到你的專案的css檔，這樣就完成css reset了。</p>
<p>我印象中還有其他方法，不過我目前只學到這個，等以後有學到其他的再來分享。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: Specificity</title>
    <url>/2022/07/06/css-specificity/</url>
    <content><![CDATA[<p>CSS中每個規則、標籤會有不同的權重，所以對相同標籤下不同規則會互相覆蓋，而誰覆蓋誰就是由權重決定。所謂的Specificity(優先級、權重)就是瀏覽器用來決定權重的算法。</p>
<h2 id="權重排序"><a href="#權重排序" class="headerlink" title="權重排序"></a>權重排序</h2><p>含有!important的規則 &gt; 直接寫在html上的style屬性 &gt; ID選擇器 &gt; 類別、偽類別、屬性選擇器 &gt; 標籤、偽元素選擇器</p>
<h2 id="順序也會影響權重"><a href="#順序也會影響權重" class="headerlink" title="順序也會影響權重"></a>順序也會影響權重</h2><p>css的寫法是由上而下，除了標籤本身的權重(上述所示)，在css檔案中的排序也會影響權重，越下方的權重越大，但順序的影響力並沒有原本權重排序來的大，所以ID選擇器就算寫在上方也不會被類別選擇器蓋掉，要特別注意</p>
<h2 id="關係選擇器可以看成加法"><a href="#關係選擇器可以看成加法" class="headerlink" title="關係選擇器可以看成加法"></a>關係選擇器可以看成加法</h2><p>以最常見的後代選擇器來說</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這種就可以理解為 10 + 1的權重，會比單純的.box權重來的高，即使.box的選擇器寫在他的下方也一樣。</p>
<br>
要學好css就一定要學會權重，這方面我也還是要多加練習，有時候會因為權重不對導致自己想要的樣式被蓋掉，在編寫上的邏輯就還要多加訓練。]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: text-align</title>
    <url>/2022/07/30/css-text-align/</url>
    <content><![CDATA[<p>text-align是css中用來對齊文字的屬性，可以將文字設定為靠左、靠右、置中等等。</p>
<h2 id="left"><a href="#left" class="headerlink" title="left"></a>left</h2><p>靠左對齊。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="right"><a href="#right" class="headerlink" title="right"></a>right</h2><p>靠右對齊。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="center"><a href="#center" class="headerlink" title="center"></a>center</h2><p>置中。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="justify"><a href="#justify" class="headerlink" title="justify"></a>justify</h2><p>將文字用不同空格隔開以達到整個文字區塊寬度相等(除了最後一行)。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="justify-all"><a href="#justify-all" class="headerlink" title="justify-all"></a>justify-all</h2><p>與jutify基本相同，但最後一行也會包括在內。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: justify-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>靠元素開頭對齊。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>靠元素結尾對齊。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="match-parent"><a href="#match-parent" class="headerlink" title="match-parent"></a>match-parent</h2><p>與父元素相同的對齊方式，但如果父元素的元素方向和子元素不同會以父元素的為準。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: match-parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上述提到的元素方向比較常見於因為float或flexbox所導致的軸線方向變換。</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 標籤、類別、ID選擇器</title>
    <url>/2022/07/03/css-tag-class-and-id-selector/</url>
    <content><![CDATA[<p>CSS中要對html元素做操作就會需要用到所謂的選擇器來選取DOM元素，這裡會介紹幾個基礎且常見的選擇器。</p>
<h2 id="標籤選擇器-Type-Selector"><a href="#標籤選擇器-Type-Selector" class="headerlink" title="標籤選擇器(Type Selector)"></a>標籤選擇器(Type Selector)</h2><p>html中有許多的標籤，之前<a href="https://huanginch.github.io/2022/06/27/html-tag/">這篇</a>也有介紹一些常見的標籤，想當然可以直接選取標籤並為他們制定規則[註1]。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="tag selector" src="https://codepen.io/intHuang/embed/QWmbmzG?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/QWmbmzG">
  tag selector</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>標籤選擇器不需要多寫什麼，直接寫上標籤名稱即可，像我這裡就幫h1加了背景。</p>
<h2 id="類別選擇器-Class-Selector"><a href="#類別選擇器-Class-Selector" class="headerlink" title="類別選擇器(Class Selector)"></a>類別選擇器(Class Selector)</h2><p>因為標籤選擇器只能選取所有相同類別的標籤而不能單獨對某個特定標籤做出處理，所以就有了類別選擇器，可以在標籤上加上屬性class，選擇時可以針對class name做選取</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="class selector" src="https://codepen.io/intHuang/embed/YzaXadM?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/YzaXadM">
  class selector</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>類別選擇器的寫法是在要選取的class name前面加上一個 <strong>.</strong></p>
<h2 id="ID選擇器-ID-Selector"><a href="#ID選擇器-ID-Selector" class="headerlink" title="ID選擇器(ID Selector)"></a>ID選擇器(ID Selector)</h2><p>和類別選擇器很類似，ID選擇器也可以針對特定元素做出處理</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="ID Selector" src="https://codepen.io/intHuang/embed/poLJLYw?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/poLJLYw">
  ID Selector</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>和class寫法不同，ID是在ID前面加上 <strong>#</strong></p>
<p>[註1]所謂的規則(Rule)指的就是選擇器加上css屬性，例如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>我自己比較常用到標籤與類別選擇器，至於類別和ID選擇器的差異會留到新文章來做比較。</p>
]]></content>
      <categories>
        <category>css selector</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: text-transform</title>
    <url>/2022/08/16/css-text-transform/</url>
    <content><![CDATA[<p>text-transform可以改變文字的大小寫，基本上是針對英文字做使用。</p>
<h2 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h2><h3 id="none"><a href="#none" class="headerlink" title="none"></a>none</h3><p>可以避免文字被套用text-transform。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-transform</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="uppercase"><a href="#uppercase" class="headerlink" title="uppercase"></a>uppercase</h3><p>將文字全部轉換成大寫</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lowercase"><a href="#lowercase" class="headerlink" title="lowercase"></a>lowercase</h3><p>將文字全部轉換成小寫</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-transform</span>: lowercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h3><p>將文字字首轉成大寫</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="full-width"><a href="#full-width" class="headerlink" title="full-width"></a>full-width</h3><p>將文字強迫塞滿整個格子，通常會作用在象形符號或是拉丁文，讓他們的對齊方式像中文或日文那樣</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">text-transform</span>: full-width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="full-size-kana"><a href="#full-size-kana" class="headerlink" title="full-size-kana"></a>full-size-kana</h3><p>通常用在<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby"><code>&lt;ruby&gt;</code></a> tag上，他會將所有小寫kana字元轉成大的kana</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>會用到這個是因為在寫六角第五週作業時某夜的文字在PC版和Pad版的字母大小寫有轉換，所以我就用上了text-transform來改變字母大小寫，至於他最後兩個屬性我還不太了解，kana似乎是用在類似日文的平假名或羅馬上標，有機會會再做介紹。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: 瀑布流排版</title>
    <url>/2022/09/12/css-waterfall/</url>
    <content><![CDATA[<p>有一種版型稱為瀑布流，特點是像瀑布一樣會垂直落下，每個元素的高度會不同，並且第二排第一個元素會接在第一排長度最短的元素底下。</p>
<ul>
<li>瀑布流排版</li>
</ul>
<p><img src="/../images/pasted-133.png"></p>
<ul>
<li><p><a href="https://masonry.desandro.com/">masonry 套件</a></p>
<p>  這個套件提供了瀑布流排版的js與css，有了這個套件就不用自己手寫一套瀑布流。</p>
</li>
<li><p>bs5官網也推薦使用這個套件，因為bs5自己沒有瀑布流的函式庫。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: vmax、vmin</title>
    <url>/2022/08/22/css-vmax-and-vmin/</url>
    <content><![CDATA[<p>vmax與vmin是css中的單位，與vh、vw很相似，都是依據viewport來改變大小的單位，與vh、vw相同，範圍是0~100。</p>
<h2 id="VMAX"><a href="#VMAX" class="headerlink" title="VMAX"></a>VMAX</h2><p>vmax會找到viewport中較大的那邊，元素的長度或寬度會與那個邊相同長度，比如現在螢幕大小是1920*1080，假設我使用了一個元素他的寬度是100vmax，那麼這個元素的寬度會和螢幕寬度相同(1920 &gt; 1080)。</p>
<h2 id="VMIN"><a href="#VMIN" class="headerlink" title="VMIN"></a>VMIN</h2><p>和vamx相反，vmin會找較短的邊，該元素長度或寬度會與短邊相同。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ul>
<li>可以試著改變螢幕大小來觀看效果</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="vmax、vmin" src="https://codepen.io/intHuang/embed/XWEGVaW?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/XWEGVaW">
  vmax、vmin</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: word-break</title>
    <url>/2022/09/09/css-word-break/</url>
    <content><![CDATA[<p>word-break是用來對內文做自動換行的語法，除了英文的斷行，也有針對中日韓語系的斷行設定。</p>
<ul>
<li>normal: 依照各語言的預設方法斷行(單字太長會超出)。</li>
<li>break-all: 超過邊界就會自動斷行(包含中日韓)</li>
<li>keep-all: 自動斷行，但在中日韓語系不適用，所以有使用到中日韓的網站不要使用。</li>
<li>break-word: 即使單字太長也會自動斷行，和使用 <code>word-break: normal</code> + <code>overflow-wrap: anywher</code>的效果相同。</li>
</ul>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="word-break" src="https://codepen.io/intHuang/embed/zYjqNpW?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/zYjqNpW">
  word-break</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: z-index</title>
    <url>/2022/07/12/css-z-index/</url>
    <content><![CDATA[<p>一般排版的時候都是調整元素在網頁上的位置，也就是x、y軸，那如果想做出元素重疊時，要調整上下層就要調整z-index。</p>
<p>z-index的數值可以自己自訂(你想寫10000也沒人阻止你，但不見一這樣做，程式碼很難維護)，但都遵循一個原則，數字越大越上面。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><p>z-index的值分成兩種，一個是數字另一個是auto，如果設成auto就會自動安排z-index，莫認為越下面z-index越大，元素也越上層；如果不寫z-index預設值為0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">	<span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">	<span class="attribute">z-index</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="z-index" src="https://codepen.io/intHuang/embed/WNzGwPE?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/WNzGwPE">
  z-index</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>可以看到除了auto，z-index的數字是越大越上層，auto的部分則是按照順序安排權重。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>當然，你會看到我都有用到position，因為有使用到position才會出現元素重疊的情形，這時候z-index就是個好用的東西，好好運用就可以排出好看的排版。</p>
]]></content>
      <categories>
        <category>css position</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS: word-wrap</title>
    <url>/2022/09/08/css-word-wrap/</url>
    <content><![CDATA[<p>word-wrap，又或者可以寫成overflow-wrap，是css中文字用來換行的語法。</p>
<ul>
<li>normal: 只在單字結束時換行，所以可能會導致文字超出div(overflow)。</li>
<li>anywhere: 在單字結束時換行，如果沒有適合的斷點會強制換行，但會考慮soft wrap。</li>
<li>break-word: 在單字結束時換行，如果沒有適合的斷點會強制換行，不考慮soft wrap。</li>
</ul>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/intHuang/embed/JjvGOmz?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/JjvGOmz">
  Untitled</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>在範例中我設定box最大寬度是150px，最小寬度是最大字母的大小(這裡會顯示出anywhere和break-word的差異)。</p>
<p>在normal情況下，如果文字本身太長是不會換行的，即使這樣文字會超出容器。在anywhere時會換行，但是換行的基準是最小寬度。break-word則是會把依照normal的方式，但超出的字母會換行。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>一般情況都是使用break-word，並且word-wrap都會搭配word-break使用，下一篇我就會來介紹word-break。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>如何部屬HEXO到github.io(deploy on github)</title>
    <url>/2022/05/22/deploy-on-github/</url>
    <content><![CDATA[<p><a href="https://huanginch.github.io/2022/05/21/hexo-admin-deploy/">上一篇文</a>提到了如何使用Hexo admin來部屬網站，但要部屬網站就要有相對的網域來讓你發佈，而github.io即是一個很常拿來發佈靜態網站的地方，這篇文就要來介紹如何使用github來發佈靜態網站。</p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li><p>註冊github: <a href="https://github.com/">https://github.com/</a></p>
</li>
<li><p>到自己的個人頁面，按下repositories旁邊的new<br><img src="/../images/pasted-5.png"></p>
</li>
<li><p>在名稱欄位輸入username.github.io(username是你註冊的帳號名稱)，因為我已經註冊過了所以會有紅字<br><img src="/../images/pasted-6.png"></p>
</li>
<li><p>拉到最下面按下create repository<br><img src="/../images/pasted-7.png"></p>
</li>
<li><p>接著到你安裝HEXO的blog資料夾，打開 <strong>_config.yml</strong></p>
</li>
<li><p>拉到最底下找到 **deploy:**，並輸入以下文字，同樣的username也是你的github帳號名稱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">        type: git</span><br><span class="line">        repo: https://github.com/username/username.github.io.git</span><br><span class="line">        branch: master</span><br></pre></td></tr></table></figure>
<p>基本上這樣就算完成了，你可以按照上篇文的步驟按下admin的deploy就可以部屬網站到github.io上，又或者你可以在終端機輸入以下指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<ul>
<li>hexo g和hexo d也可以合併替換成hexo g -d <p>完成後你可以前往自己的github.io網站(https://username.github.io/) ，你會看到網站成功出現，不過有時候他不會那麼快更新，你要稍等一下</p>
 <p>以後如果要更新文章或是發布文章也只需要輸入最後那三個終端機指令，或是直接使用admin的deploy即可，那這篇文差不多到這邊，有任何問題歡迎和我提出。</p></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo introduce</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo admin來部屬(deploy)網站</title>
    <url>/2022/05/21/hexo-admin-deploy/</url>
    <content><![CDATA[<p>Hexo admin是一個很方便的插件，可以用圖形化介面來管理你的網站後台，不過下載後來是要自己設定一些東西才能部屬網站，這篇文就是來介紹部屬的設定。</p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li><p>安裝hexo admin: 在cmd輸入以下指令，不知道怎麼打開cmd可以看<a href="https://huanginch.github.io/2022/05/19/My-First-Post/">這篇文</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$npm install hexo-admin --save</span><br></pre></td></tr></table></figure></li>
<li><p>打開blog資料夾裡的 <strong>_config.yml</strong>，在最底下新增以下程式碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin:</span><br><span class="line">          deployCommand: &#x27;hexo-publish.bat&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>在跟 <strong>_config.yml</strong> 同一層的地方新增一個叫 <strong>hexo-publish.bat</strong> 的檔案</p>
</li>
<li><p>在<strong>hexo-publish.bat</strong>中新增以下程式碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
<li><p>切換到Hexo Admin中的deploy頁面<br><img src="/../images/hexo-admin-navbar.png"></p>
</li>
<li><p>在輸入欄輸入本次更新說明文字後按下deploy即可<br><img src="/../images/pasted-4.png"></p>
</li>
</ol>
<p>因為我自己是用github.io來部屬網站，所以我成功後就可以在自己的github上面看到更新後的檔案，至於怎麼使用github來部屬網站可以到<a href="https://huanginch.github.io/2022/05/22/deploy-on-github/">這篇文</a>。</p>
]]></content>
      <categories>
        <category>hexo introduce</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML: a標籤裡面不能有a標籤</title>
    <url>/2022/09/07/html-anchor-in-anchor/</url>
    <content><![CDATA[<p>這幾天在寫六角學院切版直播班第八週作業時踩到了一個地雷，我在a標籤裡包了a標籤，我原本是要讓card變得可點擊，並且裡面有個按鈕。一般來說我在製作按鈕都會使用a標籤，導致了我a標籤裡還有一個a標籤，結果我的結構在網頁上呈現出來變成我的card-body都無法點擊，後來將a標籤改成button標籤就解決了這個問題。</p>
<p><strong>HTML規定a標籤裡不能有a標籤，同時如果a標籤沒有href屬性，那就不要用a標籤。</strong></p>
<p>這之後我在製作按鈕時應該會改成使用input標籤或button標籤，以避免再出現相同的情況。</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>2022六角網頁切版直播班心得分享</title>
    <url>/2022/09/11/hexschool-final/</url>
    <content><![CDATA[<p>經過了兩個多月的時間，算是順利從六角的網頁切版直播班順利畢業了，這篇想要來聊聊這兩個月的辛酸血淚與收穫。</p>
<h2 id="當初怎麼會想報名"><a href="#當初怎麼會想報名" class="headerlink" title="當初怎麼會想報名?"></a>當初怎麼會想報名?</h2><p>這可能要從我怎麼會想學網頁與認識六角開始說起，最一開始是因為我快畢業了，想找個未來工作的方向，加上畢業專題是做網頁後端(node.js)，做著做著其實挺開心的，就想說自己可以朝網頁學習。</p>
<p>因為當初專題是學後端，我就想說可以先從前端開始，畢竟做網頁多少要學前端的，加上朋友介紹六角學院是台灣前端數一數二的教學平台，就先買了js影音課程練練手。後來就收到六角的通知說會開設切版直播班，加上我是個完全的切版新手，連HTML都看不太懂那種，就趁機報名了這次課程，反正我暑假時間很多XD</p>
<h2 id="學習過程"><a href="#學習過程" class="headerlink" title="學習過程"></a>學習過程</h2><p>報名前就從行前說明會聽說這次主打大量作業與練習，這也是吸引我的一個地方，畢竟大學四年都只是一昧的聽別人教學，很少產出自己的作品，我沒想到的是這次課程在開始前就有作業，明明7月才正式上課我6月底就在寫作業了。</p>
<p>我必須老實說，為了趁課程正式開始前就多學一點CSS，我有在其他平台購買CSS課程，當然課前六角也有提供影音課程，不過對我這個時間很多的人來說有點不夠，所以開始前我會觀看別的課程補充更多知識。</p>
<p>前面幾週的課程與作業其實對我來說不會太困難，但大概到第三週作業難度上升，我就有感受到當初主打的作業壓力，我花的時間比以前的作業多上許多，不過到了第四週我就能明顯感受到自己的大幅進步，同樣的題目改用gulp環境開發，我只使用了週末兩天就把作業完成，真的很難想像當初第三週我光做首頁就花了將近一個禮拜的時間。</p>
<p>不過真正的魔王還在後頭，我發現我對框架並不是那麼得心應手，包括一開始聽tailwind到第五週接觸bootstrap，時常做作業都會卡卡的，這裡多虧了每日任務與穎旻老師的作業講解，每次聽完都有豁然開朗的感覺，特別是第六週的swiper，我研究了好久才做出來，但也因為第六週的磨練，我第八週首頁的swiper很快就做出來，成就感爆棚。</p>
<h2 id="最大收穫"><a href="#最大收穫" class="headerlink" title="最大收穫"></a>最大收穫</h2><p>最讓我有成就感的是從0到有產出屬於自己的作品，令我自豪的一點，除了第五週與第八週我的作業都有寫到最高難度。另外，當初校長在提出專題活動時我其實也很猶豫到底要不要參加，但考慮到我是新手，加上自己目前沒有求職需求就沒有參與了。雖然我沒有參與專題班，但我其實有趁學習期間用自己所學產出自己的專屬作品: <strong>我為自己喜歡的Vtuber寫了一個<a href="https://huanginch.github.io/iitifox/">形象網站</a></strong>，這真的是第一個完完全全由我自己設計自己開發的屬於我的網頁作品，能夠用自己所學為自己喜歡的Vtuber做點什麼真的讓我很快樂。</p>
<h2 id="自我檢討"><a href="#自我檢討" class="headerlink" title="自我檢討"></a>自我檢討</h2><p>當然我也有很多需要加強與改進的地方，我想第一個就是作業我很常在padding與margin的部分沒有多留心導致最後推出來的網頁高度和設計稿不同，這也是我說我不擅長bs5框架的原因，為了完全符合設計稿，很多地方要一直去_variable.scss修改，但這個部分也讓我了解到tailwind的utilites-first是什麼意思，所以等我完成這次課程，我打算學好tailwind。第二個就是小組討論，我們組內的時間一直湊不上，大家的積極度也不高，看著沒有人討論的群組自己也提不起勁和他們一起做作業，只能默默的自己做完，下次我該試著多提點問題增加討論。最後是第五週和第八週沒有完成最高難度，第五週沒完成單純是把心力都放在第六週了，而第八週則是開學了沒有那麼多時間可以慢慢來，加上難度高，很多地方沒有方向，沒有把首頁的Expanding Search Bar做出來是讓我覺得最可惜的一點。</p>
<h2 id="課程與活動內容感想"><a href="#課程與活動內容感想" class="headerlink" title="課程與活動內容感想"></a>課程與活動內容感想</h2><p>這次直播班最讓我驚訝的不是課程多高深、作業有奪難奪多，而是一堆當初沒有公開的活動以及隨時在線的校長，除了專題班的工作媒合就已經物超所值，完課率達到不同%數竟然有不同獎品，我最想要的就是90%的網址了，所以我拚了命在寫作業。前幾週的送書活動也讓我印象深刻，我自己其實很想要書，不過那時候還是新手，雖然有成功交出作業但真的拿不到書，高手太多了XD 下次有機會我會再次挑戰的。最後是友善的發問平台，在DC上幾乎每個問題都會有同學幫忙回答，也很常看到校長常常在線上回覆大家問題，看來大家都不用睡覺的。</p>
<h2 id="身為學長姐，分享些想入坑的新同學一些勉勵的話"><a href="#身為學長姐，分享些想入坑的新同學一些勉勵的話" class="headerlink" title="身為學長姐，分享些想入坑的新同學一些勉勵的話"></a>身為學長姐，分享些想入坑的新同學一些勉勵的話</h2><p>報名前可能要想清楚自己是否有足夠的時間完成作業，畢竟這兩個多月我真的花了很多時間在寫作業。</p>
<p>再來是認真聽課與作業講解，校長的課講解都很清晰，也時常會分享在業界要注意的細節，這些都是外面課程所沒有的，能偷多少是多少XD 作業寫不出來時除了要記得看穎旻老師的作業講解也可以上Discord多發問，多發問這點就是我還不太會的，我習慣自己先找答案，但通常找著找著就花了很多時間。</p>
<p>你如果要問我推不推薦，我只能說物超所值，我當初也因為價錢很猶豫到底要不要報名，但經過開學典禮後我就知道這個錢花得很值得了，這堂課的價值遠遠超過8000多的報名費，這兩個月可以說是我過過最充實的暑假也不為過。</p>
]]></content>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>Github: Personal Access Token</title>
    <url>/2022/06/27/github-token/</url>
    <content><![CDATA[<p>github在最近的更新對遠端推送作出了安全性的限制，以前推送時只要輸入帳號密碼即可，現在推送密碼的部分要更改成personal access token，這篇文就會來介紹如何新建一個token。</p>
<ol>
<li><p>首先到自己的github個人頁面點自己頭像進入個人資料設定</p>
<p> <img src="/../images/pasted-74.png"></p>
</li>
<li><p>進去後拉到最下面，左手邊最底下有一個developer settings</p>
<p> <img src="/../images/pasted-75.png"></p>
</li>
<li><p>點進去之後選personal acess token</p>
<p> <img src="/../images/pasted-76.png"></p>
</li>
<li><p>按generate new token</p>
<p> <img src="/../images/pasted-77.png"></p>
</li>
<li><p>按了以後他會要你輸入密碼，輸完後進入設定token頁面，你可以輸入這個token的名字、時效、並選取擁有這個token的人可以有哪些權限，基本上勾repo就好了</p>
<p> <img src="/../images/pasted-79.png"></p>
</li>
<li><p>設定好後拉到最下面按generate就完成了，記得把它給你的token複製起來，之後要從遠端推送複製這個token即可。</p>
</li>
</ol>
<p>當初用Linux做開發的時候很常使用到遠端推送，以前一直都是用密碼，直到某天他突然變成token嚇了我一跳XD，不過還蠻簡單的，至於windows好像要下一個清除的指令才能用，這邊我沒研究，之後研究完我再更新到這篇上。</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>html: 錨點</title>
    <url>/2022/08/02/html-anchor/</url>
    <content><![CDATA[<p>按下一個按鈕，可以往下滾動到頁面中相對應的區塊，這是網頁設計中很常使用到的技巧，要達成這個效果就要使用到Html中的錨點(anchor)。</p>
<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>說到錨點就要提到html的一個屬性: id，id就像是當前區塊或元素的身分證，它代表了當前元素，所以整個頁面中id只會出現一次，而id就是所謂的錨點，透過找到這個獨一無二的id來達成。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>常見於html中的id。</p>
<h2 id="a標籤"><a href="#a標籤" class="headerlink" title="a標籤"></a>a標籤</h2><p>那有了錨點，我們要怎麼讓使用者能使用這個功能？這時候就會用到a連結，我們一般預設a連結會寫成如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那個href所指向的#指的就是首頁，如果改成id的名稱就可以跳轉到那個區塊。<br>但是，所有id名稱前面都要加上#，否則他會認為是外部連結。</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><iframe height="300" style="width: 100%;" scrolling="no" title="Day 27-錨點練習" src="https://codepen.io/intHuang/embed/RwMQVPq?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/RwMQVPq">
  Day 27-錨點練習</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在網頁上使用線上icon</title>
    <url>/2022/09/03/html-icon/</url>
    <content><![CDATA[<p>在網頁上通常會使用小圖示或icon來增加設計感與樣式，也有許多按鈕都是使用icon來呈現，這篇會介紹線上svg或線上icon的引入方式。</p>
<ol>
<li><p>線上icon網站</p>
<ul>
<li>首先要找到有提供線上icon的網站，常用的有<a href="https://fonts.google.com/icons">google font</a>、<a href="https://fontawesome.com/">fontawsome</a>等免費網站(fontawsome為部分收費)。</li>
</ul>
</li>
<li><p>根據icon網站的指引引入cdn</p>
<ul>
<li><p>以google font為例，點擊icon後右手邊就會出現cdn可以讓開發者引入<br> <img src="/../images/pasted-121.png" alt="google font icon"></p>
</li>
<li><p>fontawsome的話要先填寫email他才會寄cdn給你</p>
</li>
</ul>
<p> <img src="/../images/pasted-122.png" alt="fontawsome"></p>
</li>
<li><p>將cdn引入專案中</p>
<ul>
<li>把複製好的code貼到自己html的header即可</li>
</ul>
<p> <img src="/../images/pasted-123.png"></p>
</li>
<li><p>根據網站的說明複製對應的icon code</p>
<ul>
<li>引入cdn後就可以開始使用icon了，以google font為例，右手邊也會有icon自己的code，只需要複製並貼到自己想要放icon的位置即可</li>
</ul>
<p> <img src="/../images/pasted-124.png"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>常見html標籤</title>
    <url>/2022/06/27/html-tag/</url>
    <content><![CDATA[<p>html，全名為HyperText Markup Language，其中會用到很多標籤來做撰寫，這篇會簡單介紹一些常用標籤。</p>
<h2 id="h1-h6"><a href="#h1-h6" class="headerlink" title="h1~h6"></a>h1~h6</h2><p>這些是標題標籤，其中h1為主標題，其他就是副標題，重要性依序遞減，因為h1是主標題所以只能出現一次，出現超過一次的用法都是錯的，寫法如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>副標題<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<h1>標題</h1>
<h2>副標題</h2>

<h2 id="p"><a href="#p" class="headerlink" title="p"></a>p</h2><p>p標籤代表段落，就當作是寫文章會有標題就會有內文，p就是讓你用來表示一段話的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;這是一段話這是一段話這是一段話這是一段話&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>結果:</p>
<p>這是一段話這是一段話這是一段話這是一段話</p>


<h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>a標籤是用來設定外部連結，他有一個屬性叫href，可以在裡面放置網址，網頁就會出現外部連結可以點擊，寫法如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<p><a href="https://www.google.com">link</a></p>
<p>點擊link就會連到google首頁</p>
<h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p>img就是image的縮寫，也就是用來放圖片的，通常會有兩個屬性，一個是src，用來放圖片連結，另一個是alt，用來放文字說明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://imgur.com/t/kamen_rider/5jlSPUj&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;kamen rider&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<p><img src="/../images/pasted-80.png"></p>
<h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><p>div可以比較特別，他可以在網頁上劃出一個區塊，像個盒子一樣，基本上是為了方便css做撰寫</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>結果:</p>
<div>div1</div>
<div>div2</div>

<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>input會產生一個輸入欄位，可以讓使用者輸入文字，屬性type通常會設置為text</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:<br><input type="text"><br><br></p>
<h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><p>button就是按鈕，在網頁上產生一個可以讓使用者互動的按鈕</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:<br><button>按我</button><br><br></p>
<h2 id="ul、ol、li"><a href="#ul、ol、li" class="headerlink" title="ul、ol、li"></a>ul、ol、li</h2><p>ul是unordered list，而ol是指order list，li指的是list item，所以寫法是會把li包在ul或ol裡面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<ul>
  <li>item1</li>
  <li>item2</li>
</ul>

<ol>
  <li>item1</li>
  <li>item2</li>
</ol>

<h2 id="br、hr"><a href="#br、hr" class="headerlink" title="br、hr"></a>br、hr</h2><p>br代表換行，hr代表分隔線</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>def<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<p>abc</p>
<br>
<p>def</p>
<hr>

<h2 id="註解標籤"><a href="#註解標籤" class="headerlink" title="註解標籤"></a>註解標籤</h2><p>跟其他程式語言一樣，html也有註解可以使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--這是註解--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>這是一段話<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<!--這是註解-->

<p>這是一段話</p>

<p>可以看到只有p段落有顯示出來</p>
<p>常用標籤就差不多介紹到這邊，當然還有很多很多標籤沒有介紹到，這邊只是列出很常見的，之後有機會再介紹其他標籤。</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>在HEXO文章上插入本地端圖片</title>
    <url>/2022/05/20/insertImage/</url>
    <content><![CDATA[<p>圖片對文章來說是很重要的，有了圖片的文章在各方面都比較好閱讀，想當然如果能直接上傳電腦中的圖片到文章上會是件很方便的事，然而用預設編輯器打開文章可能沒辦法直接上傳本地端的圖片，所以這篇文就要來介紹如何在你的HEXO文章中插入本地端圖片。</p>

<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li><p>先去下載hexo admin插件，在cmd輸入以下指令就可以了，不知道怎麼開cmd可以看我<a href="https://huanginch.github.io/2022/05/19/My-First-Post/">上一篇文</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$npm install hexo-admin --save</span><br></pre></td></tr></table></figure></li>
<li><p>下載好以後打開你的hexo server，打開瀏覽器輸入網址<strong><a href="http://localhost:4000/admin">http://localhost:4000/admin</a></strong> 就可以進入hexo後端主控台</p>
</li>
<li><p>其實到這邊就差不多結束了，只要用admin編輯文章就能直接貼上圖片</p>
</li>
</ol>
<h2 id="使用說明"><a href="#使用說明" class="headerlink" title="使用說明"></a>使用說明</h2><p>現在你可以貼上任何來源的圖片，包含你電腦本地端的圖片，使用複製貼上hexo就會自動幫你上傳圖片，上傳完成後會出現以下Markdown語法:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">upload successful</span>](<span class="link">\\images\pasted-0.png\</span>)</span><br></pre></td></tr></table></figure>
<p>之後你需要把這個語法改成顯示圖片的Markdown語法如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](../images/pasted-0.png)</span><br></pre></td></tr></table></figure>
<p>其中括弧內代表圖片的位址，同時pasted-0.png代表圖片名稱，是hexo自己取的，你也可以到admin settings更改設定，這個等等再介紹。<br><br><br>改好後圖片就可以成功顯示了，如果忘記圖片路徑可以到D:&#x2F;blog&#x2F;source&#x2F;images查看(我的電腦是把hexo裝在D槽，所以根目錄才是D:，要看你當初裝在哪)</p>
<h2 id="更改設定"><a href="#更改設定" class="headerlink" title="更改設定"></a>更改設定</h2><p>可以到admin的setting更改上傳圖片後會存的資料夾名稱與圖片前綴</p>
<p><img src="/../images/pasted-2.png"></p>
<p>最底下的Image Pasting Settings可以調整這兩個設定</p>
<p><img src="/../images/pasted-3.png" alt="upload successful"></p>
<p>Image diectory可以更改資料夾名稱<br><br>Image filename prefix可以更改圖片前綴，前綴就是你圖片名稱最前面的<strong>pasted-</strong></p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>當初原本按照<a href="https://yeweimian21.github.io/2019/05/23/Hexo/Hexo-insert-image/">這篇文章</a>來做，結果他還是顯示不出來，後來參考了<a href="https://ed521.github.io/2019/08/hexo-admin/">這篇文章</a>才順利解決，沒想到上傳個圖片會比我想的還費工夫XD 不過至少能用了，分享給大家。</p>
]]></content>
      <categories>
        <category>hexo introduce</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript: 常見資料型態</title>
    <url>/2022/06/03/javascript-datatype/</url>
    <content><![CDATA[<p>這篇會簡單整理常見的javascript資料型態</p>
<ul>
<li>number<ul>
<li>數字型別，不管整數小數都是number type</li>
</ul>
</li>
<li>string<ul>
<li>字串型別，用單引號或雙引號包起來都行</li>
</ul>
</li>
<li>boolean<ul>
<li>布林值，只有true和false兩種值</li>
</ul>
</li>
<li>array<ul>
<li>用 [ ] 表示，可以存數字、字串、陣列、物件等等，但每筆資料型態必須相同，表示方式為  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>object<ul>
<li>用 { } 表示，包含屬性與值，可以是數字、字串、陣列、物件等等，每筆資料都可以是不同型態，表示方式為  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;Andy&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>null<ul>
<li>空值</li>
</ul>
</li>
<li>Undefined<ul>
<li>未定義，任何變數在被初始化前都是未定義</li>
</ul>
</li>
</ul>
<p>當然這只是列出常見的，還有其他我比較不了解的我沒有列出來，就只是記錄比較常用的這樣。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: if判斷式</title>
    <url>/2022/06/06/javascript-if-statement/</url>
    <content><![CDATA[<p>在javascript中，可以透過if判斷式來進行條件判斷，比如說判斷一個人年紀是否超過18，超過18才能買菸買酒。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(statement)&#123;</span><br><span class="line">	<span class="comment">/*your code...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以前面的例子來說就可以寫成:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以買菸買酒&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="else-判斷式"><a href="#else-判斷式" class="headerlink" title="else 判斷式"></a>else 判斷式</h2><p>如果想對if以外的條件也做出處理，可以使用else</p>
<h3 id="語法-1"><a href="#語法-1" class="headerlink" title="語法"></a>語法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(statement)&#123;</span><br><span class="line">	<span class="comment">/*your code..*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">/*your code...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>當條件符合if中的判斷式時，會執行if大括弧中的code，不符合會跳過if大括弧，執行else大括弧中的code。</p>
<p>以前面的例子來說:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">18</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可以買菸買酒&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你未成年，不能買菸買酒&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="if-else-判斷式"><a href="#if-else-判斷式" class="headerlink" title="if-else 判斷式"></a>if-else 判斷式</h2><p>如果想要同時判斷多個條件，可以用if-else</p>
<h3 id="語法-2"><a href="#語法-2" class="headerlink" title="語法"></a>語法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(statement)&#123;</span><br><span class="line">	<span class="comment">/*your code...*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(statement)&#123;</span><br><span class="line">	<span class="comment">/*your code...*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">/*your code...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們用上面的例子，但這次多個條件判斷是否大於20歲來看看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;民法成年&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(age &gt; <span class="number">18</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;刑法成年&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未成年&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意! if-else可以有很多個，但if跟else只能有一個，if只能在最前，else只能在最後，if-else 和 else 可以沒有。</li>
</ul>
<p>if判斷式算是非常基本但是卻非常常被使用到的語法，紀錄下來和大家分享。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 十進制數字與其他進制數字互相轉換</title>
    <url>/2022/05/27/javascript-octal-decimal/</url>
    <content><![CDATA[<p>相較其他語言，在javascript中，要將十進制的數字轉換成其他進制的數字算是相對容易，函式在讀取參數的時候只要有相對應的前綴就會自動幫你轉換，但同時也有不便之處，這篇會來介紹我所採的雷以及如何轉換十進制成其他進制。</p>
<h2 id="十進制轉換成其他進制"><a href="#十進制轉換成其他進制" class="headerlink" title="十進制轉換成其他進制"></a>十進制轉換成其他進制</h2><p>在你的程式碼中想要做到十進制轉換成不同進制只需要用到 toString() 這個函式。<br>舉例來說我想把10進制轉成8進制以及2進制，可以這樣寫:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">11</span>).<span class="title function_">toString</span>(<span class="number">2</span>);<span class="comment">//10進制的11轉2進制表示</span></span><br><span class="line">(<span class="number">156</span>).<span class="title function_">toString</span>(<span class="number">8</span>);<span class="comment">//10進制的156轉8進制表示</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不過要注意使用了toString後資料型態會變成字串，你想要它變回數字的話記得使用parseInt();</li>
</ul>
<h2 id="其他進制轉成十進制"><a href="#其他進制轉成十進制" class="headerlink" title="其他進制轉成十進制"></a>其他進制轉成十進制</h2><p>那如果想要反過來將其他進制轉成十進制就可以使用 parseInt() 這個函式，程式碼如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">2</span>);<span class="comment">//將2進制的11轉成10進制</span></span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">8</span>);<span class="comment">//將8進制的11轉成10進制</span></span><br></pre></td></tr></table></figure>
<h2 id="參數的自動轉換"><a href="#參數的自動轉換" class="headerlink" title="參數的自動轉換"></a>參數的自動轉換</h2><p>在javascript中，如果數字以0作為前綴，它會將數字視為8進制並自動轉換成10進制<br>比如說我這樣寫:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">010</span>)</span><br></pre></td></tr></table></figure>
<p>輸出會是8，又或者是以0x為前綴則會視為16進制。<br><br>這個看似方便的功能也帶給我一些麻煩，我遇到一個題目是輸入有可能會有032這樣的輸入，但js卻會自己幫我轉型，我試著想要取消自動轉型似乎是辦不到，唯一的方法就是改成用字串輸入，所以大家在做的時候要注意使用者是否會誤輸格式，又或者是你必須限制使用者只能輸入字串。如果有人知道如何實作取消自動轉型歡迎和我分享。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript: 變數宣告</title>
    <url>/2022/06/02/javascript-variable/</url>
    <content><![CDATA[<p>javascript的變數宣告相對其他語言簡單容易的許多，這篇會簡單介紹怎麼宣告。</p>
<ul>
<li>var<ul>
<li>最早在javascript中只有這個語法可以用來宣告變數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>let <ul>
<li>現在都使用這個語法來宣告變數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>const<ul>
<li>一旦被初始化就很難再被重新賦值  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>什麼都不寫<ul>
<li>沒錯，只寫變數名稱也能夠宣告，因為沒有寫的話會被當作是在window下的變數  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>相對於其他語言，javascript宣告變數真的簡單很多，也可能和他是弱型別語言有關，這部分我不是很了解，等有機會研究之後再來寫文。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 賦值運算子</title>
    <url>/2022/06/05/js-assignment-operator/</url>
    <content><![CDATA[<p>在javascript中，變數宣告後要給予變數值才能做進一步的運算或處理，這篇會來簡單介紹能夠給予變數值的賦值運算子。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>沒錯，賦值運算子就是那個等於，上面這段程式碼的意思是把數字1存到a變數裡面，看起來與數學中的等於很相似，但是! 這也是新手常常會搞錯的地方，javascript中的等於要寫成「&#x3D;&#x3D;」或是「&#x3D;&#x3D;&#x3D;」。<br><br>很重要，<strong>js一個等號不是數學中的相等，一個等號是把值(數字、字串、陣列等)賦予給變數</strong>。<br></p>
<p>即使是老手偶爾也會打錯，所以要記得比較時不要用錯用成一個等號。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: bit operator</title>
    <url>/2022/06/13/js-bit-operator/</url>
    <content><![CDATA[<p>我們在前幾篇有介紹到邏輯運算子，這篇會來介紹新手很容易與邏輯運算子搞錯的位元運算子，其實我之前也有介紹過C的位元運算子，不過javascript能用的指令比C多了一些，就讓我們來看一下吧。</p>
<ul>
<li>and: &amp;<ul>
<li>兩個位元都為1就設為1</li>
</ul>
</li>
<li>or: |<ul>
<li>其中一個位元為1就設為1</li>
</ul>
</li>
<li>xor: ^<ul>
<li>兩個位元不同就設為1</li>
</ul>
</li>
<li>not: ~<ul>
<li>位元為0設為1，位元為1設為0</li>
</ul>
</li>
<li>zero fill left shift: &lt;&lt;<ul>
<li>全部位元往左移動，空著的地方補0</li>
</ul>
</li>
<li>signed right shift: &gt;&gt;<ul>
<li>全部位元往右移動，但最右邊的會被推到最左邊(循環的概念)</li>
</ul>
</li>
<li>zero fill right shift: &gt;&gt;&gt;<ul>
<li>全部位元往右移動，空著的地方補0</li>
</ul>
</li>
</ul>
<p>與C最不同的是，js提供了signed right shift，讓我們不用自己寫(話說前幾天考試才剛考如何用C寫出signed right shift XD)，算是相當方便，不過其他的部分就大同小異，重要的還是要注意這是針對位元來做邏輯運算，而不是對整個資料。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 比較運算子</title>
    <url>/2022/06/14/js-compare-operator/</url>
    <content><![CDATA[<p>在<a href="https://huanginch.github.io/2022/06/05/js-assignment-operator/">賦值運算子篇</a>中有提到常常被新手搞混的「&#x3D;&#x3D;」，這篇就會來介紹和 &#x3D;&#x3D; 同為比較運算子的成員。</p>
<ul>
<li><p>大於: &gt;</p>
<ul>
<li>判斷左式是否大於右式，與數學中的大於無異。</li>
</ul>
</li>
<li><p>小於: &lt;</p>
<ul>
<li>判斷左式是否小於右式，與數學中的小於無異。</li>
</ul>
</li>
<li><p>等於: &#x3D;&#x3D;</p>
<ul>
<li>判斷左右兩邊是否相等，相等回傳true，不相等回傳false，就和數學中的相等是一樣的，值得注意的是，因為js是弱型別語言，所以在使用時他會先幫你強制轉型，所以可以用來比較數字和字串，比如說:  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">lo</span>(<span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>); <span class="comment">//執行結果: true</span></span><br></pre></td></tr></table></figure>
  很酷吧，明明兩個型態不一樣，但內容一樣比較結果就是相等。</li>
</ul>
</li>
<li><p>嚴格等於: &#x3D;&#x3D;&#x3D;</p>
<ul>
<li>那如果我不想要他幫我強制轉型怎麼辦?我就是要判斷他是不是不同型別啊?那沒問題喔，js有提供另一種等於，叫做嚴格等於，就跟其他強型別語言中的 &#x3D;&#x3D; 一樣，型別不同就會回傳false。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>);<span class="comment">//執行結果: false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>大於等於: &gt;&#x3D;</p>
<ul>
<li>判斷左式是否大於等於右式，這裡也是不嚴格。</li>
</ul>
</li>
<li><p>小於等於: &lt;&#x3D;</p>
<ul>
<li>判斷左式是否小於等於右式，這裡也是不嚴格。</li>
</ul>
</li>
<li><p>不等於: !&#x3D;</p>
<ul>
<li>和 &#x3D;&#x3D; 類似，這是比較左右兩式是否不等，同樣也是不嚴格比較，所以數字和字串相比可能會得到與你預期不同的結果。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> != <span class="string">&#x27;1&#x27;</span>);<span class="comment">//執行結果: false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>嚴格不等於: !&#x3D;&#x3D;</p>
<ul>
<li>你如果希望上面那段code得到true的結果就可以使用這個。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> != <span class="string">&#x27;1&#x27;</span>);<span class="comment">//執行結果: true </span></span><br></pre></td></tr></table></figure>
這些就是全部的比較運算子，第一次接觸的js的時候常常因為不嚴格等於而遇到bug，所以大家在寫的時候最好多注意一下，不要犯了跟我一樣的錯。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 條件運算子(三元運算子)</title>
    <url>/2022/06/16/js-conditional-operator/</url>
    <content><![CDATA[<p>上一篇有提到一元運算子以及二元運算子，這篇會來介紹三元運算子。<br>三元運算子，又稱作條件運算子，顧名思義就是針對三個運算元做運算。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><p>condition ? 值a : 值b;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> msg = a &gt;= <span class="number">0</span> ? <span class="string">&quot;a is positive&quot;</span> : <span class="string">&quot;a is negtive&quot;</span> ;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">//執行結果: &quot;a is positive&quot;</span></span><br></pre></td></tr></table></figure>

<p>簡單來說問號前面是判斷式，根據你給的式子，成立的話會回傳值a，不成立就值b，所以才會又稱為條件運算子。</p>
<p>一開始看到這個的時候會覺得是什麼XD 可能是因為這個東西其實不常使用，多數時候我們還是會使用if-else，主要是閱讀上比較直觀，但偶爾會不想寫那麼長的程式碼就會用這個代替。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery: $(document).ready()</title>
    <url>/2022/08/10/jquery-document-ready/</url>
    <content><![CDATA[<p>在撰寫jquery時要特別注意，一般來說所有的程式都要寫在 $(document).ready()裡，這個函式代表網頁載入完成後該執行什麼，所以將一些動畫程式碼寫在這個外面會沒有作用。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//your code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>document指的是整個網頁，透過$()可以監聽，而ready()是確認監聽的元素是否完全載入好。</p>
<p>關於jquery基本介紹可以看<a href="https://huanginch.github.io/2022/07/29/JQuery-intro/">這篇</a></p>
]]></content>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 選取DOM元素</title>
    <url>/2022/05/31/js-dom-selector/</url>
    <content><![CDATA[<p>在javascipt中，如果想操作Html的元素要先使用document.querySelector()等語法來選取，這篇會來介紹有哪些語法以及如何選取。</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><ul>
<li>document.querySelector(): 最常見的語法，這個語法可以選取html中<strong>第一個符合條件的元素</strong>。</li>
<li>document.querySelectorAll(): 與querySelector()用法相同，但會選取<strong>所有符合條件的元素</strong>，並回傳一個nodelist。</li>
<li>document.getElementById(): 根據指定的id選取相對應元素。</li>
<li>document.getElementByClassName(): 根據指定的class名稱選取相對應元素。</li>
<li>document.getElementByTagName():根據指定的標籤名稱選取相對應元素。</li>
</ul>
<h2 id="選取元素"><a href="#選取元素" class="headerlink" title="選取元素"></a>選取元素</h2><p>在qeuerySelector()與querySelectorAll()中，根據選取不同類型元素，條件寫法也不同。<br></p>
<ul>
<li>選取html tag: 在單引號或雙引號中直接寫上標籤名稱即可<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li>選取class name: 在在單引號或雙引號中寫上classname，但前面必須加.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.header&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li>選取id: 在單引號或雙引號中寫上id，但前面必須加#<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#email&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>其實選取方式就跟css的選取方式相同，所以說querySelector的部分也可以寫成這樣:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.header h1&#x27;</span>); <span class="comment">// 選取header class中的h1</span></span><br></pre></td></tr></table></figure>
<p>在剩下的getElementBy…中，只需要在單引號或雙引號中寫下相對應的名字即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;header&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>這篇算是簡單整理，幫助自己記憶，平常的話我都使用querySelector()或querySelectorAll()而已，其他幾個視情況使用，分享給大家。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 讀取JSON</title>
    <url>/2022/06/25/js-json/</url>
    <content><![CDATA[<p>在<a href="https://huanginch.github.io/2022/06/24/JSON%E6%A0%BC%E5%BC%8F/">這篇</a>有介紹過json格式，這篇會來介紹如何用js讀取json。</p>
<p>假設我們有一個json檔:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;first_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Frannie&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sandeland&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fsandeland0@sogou.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ip_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;227.100.11.35&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;first_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Batsheva&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Biswell&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bbiswell1@miitbeian.gov.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ip_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;214.81.196.38&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;first_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Priscilla&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mapletoft&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pmapletoft2@reference.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Genderfluid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ip_address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;37.45.100.248&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>假設我想要讀取第二筆的email，那這邊就要先觀察這個格式最外層，上一篇也說過通常最外層是陣列，這裡也是，那我就要寫成:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="string">`這裡貼上剛剛的data`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = data[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>這邊就會得到第二筆資料全部內容，可是我要怎麼單獨取出email欄位? 很簡單，因為這層是物件，用物件取值的方法就行了，寫法有兩種:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = data[<span class="number">1</span>].<span class="property">email</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = data[<span class="number">1</span>][<span class="string">&#x27;email&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>這樣就可以拿到第二筆資料的email了，把上面的code整理一下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="string">`這裡貼上剛剛的data`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = data[<span class="number">1</span>].<span class="property">email</span> <span class="comment">//或是 data[1][&#x27;email&#x27;];</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">//執行結果: bbiswell1@miitbeian.gov.cn</span></span><br></pre></td></tr></table></figure>

<p>是不是很簡單? 這篇裡有提到物件的讀取方法，但我還沒有寫文章介紹過，下次會整理一篇物件相關的文章，謝謝觀看。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: delete、逗號運算子、字串運算子</title>
    <url>/2022/06/19/js-operator/</url>
    <content><![CDATA[<p>前面幾篇幾乎把所有的運算子都介紹過一遍了，這篇會介紹幾個寫起來篇幅比較少的運算子。</p>
<h2 id="一元運算子-delete"><a href="#一元運算子-delete" class="headerlink" title="一元運算子: delete"></a>一元運算子: delete</h2><p>之前在<a href="https://huanginch.github.io/2022/06/15/js-arthimetic-operator/">算術運算子篇</a>中也有介紹其他的一元運算子，這篇會把最後的一元運算子介紹給大家。</p>
<p>delete可以刪除物件、物件屬性、陣列元素等等。刪除後物件會變成undefined</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete 物件名稱;</span><br><span class="line"></span><br><span class="line">delete 物件名稱.屬性;</span><br><span class="line"></span><br><span class="line">delete 物件名稱[index];</span><br><span class="line"></span><br><span class="line">delete 屬性; //只有在with中才能使用</span><br></pre></td></tr></table></figure>

<h2 id="逗點運算子"><a href="#逗點運算子" class="headerlink" title="逗點運算子"></a>逗點運算子</h2><p>常用於迴圈內，可以同時進行兩種條件式判斷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(i = 0, j = 0; i &lt; n, j &lt;= n, i++, j++)&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字串運算子"><a href="#字串運算子" class="headerlink" title="字串運算子"></a>字串運算子</h2><p>其實就是 ‘+’，只是他也可以用來連接字串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str1 = &#x27;this&#x27;;</span><br><span class="line">let str2 = &#x27;is&#x27;;</span><br><span class="line"></span><br><span class="line">let str3 = str1 + str2;</span><br><span class="line"></span><br><span class="line">console.log(str3);//執行結果: thisis</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 運算子總整理</title>
    <url>/2022/06/21/js-operators/</url>
    <content><![CDATA[<p>因為之前發的運算子文章都是分開發的，雖然有資料夾整理好，不過我覺得要調整一下順序跟增加優先級表格。</p>
<h2 id="文章整理"><a href="#文章整理" class="headerlink" title="文章整理"></a>文章整理</h2><ul>
<li>順序大致會比照MDN的順序</li>
</ul>
<ol>
<li><p><a href="https://huanginch.github.io/2022/06/05/js-assignment-operator/">賦值運算子</a></p>
</li>
<li><p><a href="https://huanginch.github.io/2022/06/14/js-compare-operator/">比較運算子</a></p>
</li>
<li><p><a href="https://huanginch.github.io/2022/06/15/js-arthimetic-operator/">算數運算子</a></p>
</li>
<li><p><a href="https://huanginch.github.io/2022/06/13/js-bit-operator/">位元運算子</a></p>
</li>
<li><p><a href="https://huanginch.github.io/2022/06/04/Javascript-logic-operator/">邏輯運算子</a></p>
</li>
<li><p><a href="https://huanginch.github.io/2022/06/16/js-conditional-operator/">三元運算子</a></p>
</li>
<li><p><a href="https://huanginch.github.io/2022/06/17/js-relation-operator/">關係運算子</a></p>
</li>
<li><p>其他:</p>
<ol>
<li><a href="https://huanginch.github.io/2022/06/19/js-operator/">delete、逗號運算子、字串運算子</a></li>
<li><a href="https://huanginch.github.io/2022/06/20/js-typeof/">typeof、void</a></li>
</ol>
</li>
</ol>
<h2 id="運算子優先級"><a href="#運算子優先級" class="headerlink" title="運算子優先級"></a>運算子優先級</h2><table>
<thead>
<tr>
<th>運算子類型</th>
<th>屬於該類別的運算子</th>
</tr>
</thead>
<tbody><tr>
<td>成員</td>
<td><code>. []</code></td>
</tr>
<tr>
<td>呼叫&#x2F;建立 實例</td>
<td><code>() new</code></td>
</tr>
<tr>
<td>反向&#x2F;增加</td>
<td><code>! ~ - + ++ -- typeof void delete</code></td>
</tr>
<tr>
<td>乘法&#x2F;除法</td>
<td><code>* / %</code></td>
</tr>
<tr>
<td>加法&#x2F;減法</td>
<td><code>+ -</code></td>
</tr>
<tr>
<td>位元移動</td>
<td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>
</tr>
<tr>
<td>關係運算子</td>
<td><code>&lt; &lt;= &gt; &gt;= in instanceof</code></td>
</tr>
<tr>
<td>相等性</td>
<td><code>== != === !==</code></td>
</tr>
<tr>
<td>位元 and</td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td>位元 xor</td>
<td><code>^</code></td>
</tr>
<tr>
<td>位元 or</td>
<td><code>|</code></td>
</tr>
<tr>
<td>邏輯 and</td>
<td><code>&amp;&amp;</code></td>
</tr>
<tr>
<td>邏輯 or</td>
<td><code>||</code></td>
</tr>
<tr>
<td>條件運算子</td>
<td><code>? :</code></td>
</tr>
<tr>
<td>指定運算子</td>
<td><code>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</code></td>
</tr>
<tr>
<td>逗點運算子</td>
<td><code>,</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 關係運算子</title>
    <url>/2022/06/17/js-relation-operator/</url>
    <content><![CDATA[<p>可以比較兩者的關係(子集與宇集的概念)</p>
<h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a <span class="keyword">in</span> b</span><br></pre></td></tr></table></figure>

<p>如果a在b裡面，回傳true，否則回傳false。</p>
<p>ex:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">in</span> arr);<span class="comment">//執行結果: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;length&#x27;</span> <span class="keyword">in</span> arr);<span class="comment">//執行結果: true</span></span><br></pre></td></tr></table></figure>

<p>可以比較的不只是元素與陣列，還有函式與物件，屬性與物件都可以比較，所以’length’ in arr才會回傳true，因為arr的屬性有length。</p>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">物件名稱 <span class="keyword">instanceof</span> 物件類型</span><br></pre></td></tr></table></figure>

<p>跟in比較不一樣，instanceof只是用來比較這個物件是不是某個物件類型，是的話一樣回傳true。用英文來看就是這個object是不是這個class的instance，這裡如果對物件導向有了解應該就看得懂，不了解也沒關係，可以看看以下例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> theDay = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1995</span>, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(theDay <span class="keyword">instanceof</span> <span class="title class_">Date</span>);<span class="comment">//執行結果: true</span></span><br></pre></td></tr></table></figure>

<p>這樣應該就比較清楚了，關係運算式我自己比較少用到，但可能是我做的專案還不夠多不夠大，不過我自己覺得他用起來很方便，那這篇就差不多到這邊。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: typeof、void</title>
    <url>/2022/06/20/js-typeof/</url>
    <content><![CDATA[<p>這篇也繼續把剩下的運算子補齊。</p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof有兩種寫法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 運算元</span><br><span class="line"></span><br><span class="line"><span class="title function_">typeof</span>(運算元)</span><br></pre></td></tr></table></figure>

<p>這兩種意思都一樣，使用typeof回傳運算元的資料型態，非常方便，所以這個運算子也是相當常見。</p>
<h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>void也有兩種寫法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void 運算式</span><br><span class="line"></span><br><span class="line">void(運算式)</span><br></pre></td></tr></table></figure>

<p>void會解析運算式然後回傳undefined，白話一點就是不回傳任何東西但可以執行後面的運算式。可以被使用在a連結中:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>點擊這裡，甚麼都不會發生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>當使用者點擊連結時， void(0)會被解析為undefined， 而甚麼都不會發生。這個算是比較少見，但偶爾會看到有人使用來增加程式的可讀性。</p>
<p>寫了這麼多篇運算子也結束了，這篇就是運算子介紹完結篇，下次會出一篇總整理方便大家找。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs: 更改版本</title>
    <url>/2022/06/18/node-change-version/</url>
    <content><![CDATA[<p>昨天在做六角的作業時有項任務是要架設GGG環境(用gulp建立github page)，但是我的node是最新版本(v16)，而gulp要求的版本只能在v12~v14(其實我不確定是不是gulp，因為當初報錯是node-sass找不到)，反正結論就是要用v14，我就想說找個可以隨意切換版本的，因為刪掉重裝好像有點硬A，所以我就找到nvm這個東西。殊不知，問題一堆，安裝環境這東西真的是搞死我。</p>
<p>先一步一步來說好了，一開始我是先按照六角給的指示安裝了一個node.exe(v14)，可是我電腦的環境沒辦法被這東西蓋掉，我裡面的v16還是活得好好的，所以我就跑去裝nvm，參考了蠻多篇，我也不知道為什麼大家都寫的這麼不清楚，所以我這邊會好好解釋。</p>
<h2 id="nvm安裝步驟"><a href="#nvm安裝步驟" class="headerlink" title="nvm安裝步驟"></a>nvm安裝步驟</h2><ol>
<li><p>去<a href="https://github.com/coreybutler/nvm-windows/releases">官網</a>下載nvm-setup.exe，你要載zip也行，裡面打開也就一個一樣的exe。</p>
</li>
<li><p>載完之後執行他，按下一步之後停下，把這個路徑記起來。</p>
<p> <img src="/../images/pasted-70.png"></p>
<p> 再下一步是nodejs路徑</p>
<p> <img src="/../images/pasted-69.png"></p>
<p> 這裡請把nodejs資料夾移到一個名字沒有空格的路徑底下。</p>
<p> 完成後去修改環境變數，把剛剛複製的路徑貼上。步驟如下:</p>
<ol>
<li>打開設定-&gt;系統-&gt;關於-&gt;右手邊的進階系統設定</li>
<li>打開後會出現一個視窗，按下那個環境變數</li>
</ol>
<p> <img src="/../images/pasted-71.png"></p>
<ol start="3">
<li>找到上面那格的path按下編輯</li>
</ol>
<p> <img src="/../images/pasted-72.png"></p>
<ol start="4">
<li>按下新增，貼上路徑，儲存確定離開</li>
</ol>
<p> <img src="/../images/pasted-73.png"></p>
<ol start="5">
<li>到終端機打 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh </span><br></pre></td></tr></table></figure></li>
</ol>
<p> [註]本人環境為windows，mac我不會XD</p>
 <br></li>
</ol>
<p>我之前就是少做了新增環境變數所以一直沒辦法執行nvm，我也不知道為什麼其他說明都沒寫到要修改，可能是我上面那兩個他自己幫我加的nvm路徑沒作用吧，具體原因我也不知道為什麼。</p>
<p>再來就是下載node v14，我一開始以為我用的方法是對的，結果今天要來hexo寫文發現v14不支援hexo，想改回v16卻發現沒用。恩? 這當初不就是要來切換版本的嗎怎麼沒有用??</p>
<p>那是因為我一開始不管怎麼用六角給的node.exe他就是沒辦法切換(可能我放錯路徑，但我現在還是不知道該放哪)，所以我就跑去載了msi檔，因為當初裝v16也是載這個，欸，等等，其實這樣會把原本的v16蓋掉，說好的用nvm不要硬A呢? 但是我真的沒注意到這件事，看到nvm列出版本有v14，正在使用的也是v14，GGG也用好了就以為萬事ok了(而且那時候我打錯nvm install指令所以一直載不好才用msi檔。)</p>
<p>所以該怎麼辦?</p>
<h2 id="nvm-切換版本步驟"><a href="#nvm-切換版本步驟" class="headerlink" title="nvm 切換版本步驟"></a>nvm 切換版本步驟</h2><ol>
<li><p>把電腦中的node環境全部remove掉</p>
</li>
<li><p>對cmd按右鍵，以系統管理員身分執行cmd</p>
</li>
<li><p>nvm install [版本名稱]</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 16.14.0</span><br></pre></td></tr></table></figure>
<ul>
<li>想看有沒有裝成功可以使用nvm list觀看，他會列出所有已安裝的版本。</li>
</ul>
</li>
<li><p>nvm use [版本名稱]</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 16.14.0</span><br></pre></td></tr></table></figure>
<ul>
<li>如此一來就可以自由切換node版本了</li>
</ul>
</li>
</ol>
<p>真的沒想到建個環境會遇到這麼多問題，而且我本來以為我解決了，沒想到又跑出一堆問題，今天執行hexo發現不能用真的嚇了我一跳，然後要切版本又切不回去QQ，搞了半天根本是昨天就搞錯了，用nvm就直接用nvm裝node就好，不要另外裝node.exe還是什麼的，不過剛好可以當作一篇文章記錄起來XD 希望我沒有漏掉什麼，如果有哪裡看不懂歡迎再跟我說。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Github pages 設定 domain name: 以部屬在github pages上的HEXO為例</title>
    <url>/2022/09/22/omain-name/</url>
    <content><![CDATA[<p>最近在<a href="https://tw.godaddy.com/">godaddy</a>上購買了一個網域名稱，經過幾番波折終於幫自己的github page設定好自訂的domain name了，這篇會來介紹怎麼設定。</p>
<h2 id="購買網域名稱"><a href="#購買網域名稱" class="headerlink" title="購買網域名稱"></a>購買網域名稱</h2><p>第一步當然是要去買一個網域，除了godaddy也有其他服務可以用，這邊就只介紹godaddy，基本上大同小異。</p>
<ul>
<li><p>輸入自己想要的網域名稱看看有沒有被使用，沒有就可以繼續<br><img src="/../images/pasted-134.png"></p>
</li>
<li><p>我這裡就隨便打幾個字，他會給你推薦方案，我自己是買了inthuang.tw這個名稱</p>
</li>
</ul>
<p><img src="/../images/pasted-135.png"></p>
<h2 id="godaddy設定"><a href="#godaddy設定" class="headerlink" title="godaddy設定"></a>godaddy設定</h2><ul>
<li>進到設定裡面，找到自己購買的網域</li>
</ul>
<p><img src="/../images/pasted-136.png"></p>
<ul>
<li><p>點選新增<br><img src="/../images/pasted-137.png"></p>
</li>
<li><p><strong>把內建的 CNAME www domianname 刪掉(很重要!!一定要做!!)</strong></p>
</li>
<li><p>輸入以下網域</p>
<ol>
<li><p>自己的github.io的網址<br>  <img src="/../images/pasted-145.png"></p>
</li>
<li><p>github主機ip</p>
</li>
</ol>
<p>  <img src="/../images/pasted-139.png"></p>
<pre><code>  * github總共提供四個ip，我是任選兩個設定
</code></pre>
<p>  <img src="/../images/pasted-140.png"></p>
</li>
</ul>
<h2 id="github-page設定"><a href="#github-page設定" class="headerlink" title="github page設定"></a>github page設定</h2><ul>
<li><p>到自己hexo的repo設定裡，如果不知道怎麼部屬hexo到自己的git上面可以參考<a href="https://inthuang.tw/2022/05/22/deploy-on-github/">這篇</a></p>
</li>
<li><p>在設定裡找到pages</p>
</li>
</ul>
<p><img src="/../images/pasted-141.png"></p>
<ul>
<li>往下拉有個custom domain，輸入你購買的網域名稱</li>
</ul>
<p><img src="/../images/pasted-142.png"></p>
<ul>
<li>等他跑好就行，記得跑好後要勾選下面的啟用https</li>
</ul>
<p><img src="/../images/pasted-143.png"></p>
<ul>
<li>拉到最上面就可以看到自己網頁的link成功變成自訂的domain name</li>
</ul>
<p><img src="/../images/pasted-144.png"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我一開始在設定時cname www username.github.io都無法設定，一直說請輸入有效的值，一開始我以為是www有錯，後來才發現我要把預設的 cname www domainname刪掉才能新增，真是搞死我…這邊新增後github那邊也能順利驗證TLS了，可喜可賀。</p>
<p>如此一來其他的專案的domain name也能變成我自訂的名稱，不用特別設定，因為他們都是在github.io底下的網站，相當方便。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>domain name</tag>
        <tag>DNS</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>owl-carousel drag bug</title>
    <url>/2022/08/06/owl-carsouel-drag-bug/</url>
    <content><![CDATA[<p>owl-carsouel是一個jquery插件，提供滾動式卡片樣式與動畫，<a href="https://owlcarousel2.github.io/OwlCarousel2/">官網</a>，但是我卻發現他有一個bug，在手機版上如果左右滑動後點擊事件會失效。</p>
<p>查了查後發現是owl-carsouel一直以來的bug，按著<a href="https://github.com/OwlCarousel2/OwlCarousel2/issues/1864">這篇</a>試著解決這個bug，簡單來說要把owl.carousel.js或owl.carousel.min.js中的<code>(Math.abs(d.x)&gt;3||(new Date).getTime()-this._drag.time&gt;300)</code>改成<code>((Math.abs(delta.x) &gt; 3 || new Date().getTime() - this._drag.time &gt; 300) &amp;&amp; event.type === &#39;mouseup&#39;)</code>，我這著做之後在電腦上即使使用開發人員工具換成手機模式也不會產生bug了可喜可賀。</p>
<p>但是，沒錯，但是我用手機開網頁這個bug還是在，真的尷尬，現在我查不到任何解決方法了，值得慶幸的是再點一次同樣可以觸發，如果有人知道如何解決歡迎告訴我。</p>
]]></content>
      <tags>
        <tag>jquery</tag>
        <tag>owl-carousel</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 陣列函式(下)</title>
    <url>/2022/06/10/js-array-function/</url>
    <content><![CDATA[<p>我們在<a href="https://huanginch.github.io/2022/06/09/Javascript-array-function/">上篇</a>介紹了forEach、filter、find、findIndex和map，這篇會來介紹其他常用的陣列函式。</p>
<ul>
<li><p>slice():</p>
<ul>
<li>slice可以從給定的範圍複製一份新的array。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr1 = arr.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> newArr2 = arr.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr1);<span class="comment">//執行結果:[3, 4, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2);<span class="comment">//執行結果:[3, 4]</span></span><br></pre></td></tr></table></figure>
  帶入slice中的第一個參數代表要從哪個索引值開始複製，第二個代表結束的索引值，不代第二個預設會是複製到array結束，如果帶入負數會從最後一個元素開始往前推，比如說-3就是倒數第三個。這裡要注意，複製範圍是含頭不含尾，所以可以看到newArr2只複製到索引值3的元素。</li>
</ul>
</li>
<li><p>splice():</p>
<ul>
<li>這個函式跟slice只差了一個字，導致我常常記錯。與slice不同，splice是用來插入或刪除元素，比較像是push跟pop的用法。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//執行結果:[2, 3];</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//執行結果:[5, 2, 3];</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//執行結果:[1, 2, 3];</span></span><br></pre></td></tr></table></figure>
  splice第一個參數代表開始的索引值，這裡跟slice一樣，第二個代表要移動幾步，比如說以執行結果1來說，我從索引值0移動了一步，移到了索引值1，接著用第三個參數的值取代掉移動到的前一個元素(一樣含頭不含尾的概念)，而結果1沒有第三個參數，所以執行出來後arr只剩下[2, 3]。雖然說可以做到刪除插入元素的結果，但我個人感覺整體邏輯是取代就是，拿執行結果2來說，不移動所以沒東西可以取代，就直接插入5這樣。最後，跟slice一樣，參數可以代負數，負數就代表從最後面開始算。</li>
</ul>
</li>
<li><p>sort():</p>
<ul>
<li>這個從名字就可以看出來是排序用的。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//執行結果:[1, 3, 4, 5, 6, 8]</span></span><br></pre></td></tr></table></figure>
  直接使用的話是由小排到大，如果是字串就按照ascii code來排，比較特別的是sort可以寫compare function來自訂排序方式。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>];</span><br><span class="line"> arr.<span class="title function_">sort</span>(<span class="title function_">compare</span>(<span class="params">b, a</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> ( a &lt; b) &#123;</span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( a &gt; b) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// a 必須等於 b</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//執行結果:[5, 2, 1, 0]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
  a, b代表了陣列中的元素，他會依序去比較你帶入的參數，小於回傳-1，大於回傳+1，等於回傳0。像這裡我就把它改成由大排到小。</li>
</ul>
</li>
</ul>
<p>本次陣列函式介紹就差不多到這邊，雖然沒有列出所有的函式，但我認為我列出的已經是相對常用的了，希望大家會喜歡。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>輪播插件: swiper.js</title>
    <url>/2022/09/05/swiper-js/</url>
    <content><![CDATA[<p>這篇要介紹一個很好用的插件-swiper.js。這個插件可以用來做卡片輪播動畫，最重要的是他提供RWD以及可以客製化樣式。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ul>
<li>官網: <a href="https://swiperjs.com/">https://swiperjs.com/</a></li>
<li>npm:   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install swiper</span><br></pre></td></tr></table></figure></li>
<li>CDN:  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2></li>
</ul>
<ol>
<li><p>html</p>
<ul>
<li>最外層是swiper，內層會有swiper-wrapper，wrapper裡面用swiper-slide包輪播的卡片。視需求可以新增pagination(底下的換頁點點)、navigation buttons(左右換頁)、scrollbar</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 這裡的mySwiper可以自己取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper mySwiper&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Additional required wrapper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Slides --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- If we need pagination --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- If we need navigation buttons --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- If we need scrollbar --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-scrollbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>css</p>
<ul>
<li>swiper有提供自己的css，可以按照css內定義的class，用覆蓋的方式複寫上自己的樣式，有些東西有swiper自己的樣式，在修改時要特別注意。更多可以參考<a href="https://swiperjs.com/swiper-api#css-styles">官方文件</a></li>
</ul>
</li>
<li><p>js</p>
<ul>
<li>swiper提供非常多js動畫，可以根據自己需求選擇對應的動畫，可以參考<a href="https://swiperjs.com/demos">官網的demo</a>，點擊open in new window可以觀看原始碼</li>
</ul>
<p><img src="/../images/pasted-125.png"></p>
<ul>
<li>要使用swiper的初始設定要在js撰寫swiper的語法(.mySwiper要填入自己為swiper命名的class)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> swiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.mySwiper&quot;</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>要新增其他動畫等等就可以依據官網的各種demo複製貼上做修改</li>
</ul>
</li>
</ol>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p> swiper最強大的但同時也最讓我頭痛的是他的樣式客製化，會寫的話基本上什麼樣的樣式都能靠自己手刻css寫出來，但麻煩的是要先弄清楚他原本的css怎麼寫，否則會蓋不掉。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript: 算數運算子</title>
    <url>/2022/06/15/js-arthimetic-operator/</url>
    <content><![CDATA[<p>算術運算子，簡單來說就是加減乘除。不過除了這幾個之外，還有其他可以使用，像次方之類的，這篇就會列出所有js中的算術運算子。</p>
<ul>
<li>加法: +<ul>
<li>就跟數學中的加法一樣</li>
</ul>
</li>
<li>減法: -<ul>
<li>就跟數學中的減法一樣</li>
</ul>
</li>
<li>乘法: *<ul>
<li>就跟數學中的乘法一樣</li>
</ul>
</li>
<li>取商數: &#x2F;<ul>
<li>js中的除法分成兩種，取商數和取餘數，這個就會回傳商數。</li>
</ul>
</li>
<li>取餘數: %<ul>
<li>這個不念percent，要念mod。會回傳除法的餘數，其實就是數學中的mod運算。</li>
</ul>
</li>
<li>增加: ++<ul>
<li>一元運算子，對變數做增加1。比如說  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">a++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//執行結果: 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>減少: –<ul>
<li>一元運算子，對變數做減少1。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">a--;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//執行結果: -1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>取負數: -<ul>
<li>一元運算子，我自己覺得跟減法很像，不過前面的減法是二元運算子。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-a); <span class="comment">//執行結果: -1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>加號: +<ul>
<li>一元運算子，可以把不是數字的運算元改成數字。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">true</span>); <span class="comment">//執行結果: 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>指數運算子: **<ul>
<li>用來運算指數的 a ** b 就是算a的b次方。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>**<span class="number">3</span>); <span class="comment">//執行結果: 8</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>[註] 一元運算子表示只需要一個運算元，二元表示要兩個運算元，三元表示三個，最多到三元。上述沒有特別標註的都是二元運算子，而三元之後會另外寫一篇。</p>
]]></content>
      <categories>
        <category>js-operator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[雜談] 聊聊關於Copilot與AI繪圖</title>
    <url>/2022/10/16/about-ai/</url>
    <content><![CDATA[<p>這幾天AI繪圖的討論度很高，加上我這幾天剛裝了Copilot，所以就來聊聊這兩個東西吧。</p>
<p>我相信有在接觸程式的人沒聽過Copilot也聽過AI幫你寫程式的插件，沒錯Copilot就是這個神奇的AI插件。為什麼我會把Copilot和AI繪圖擺在一起討論? 簡單來說我覺得他們本質上是相同的東西，有趣的是AI繪圖的討論度非常之高，甚至又再度出現AI是否會取代繪師的聲音，而Copilot卻沒有造成這麼大的討論度(不能說沒有，他當初出來時也是有人在討論搞不好會取代我們這些工程師，不過基本上沒有AI繪圖那麼熱烈)。</p>
<h2 id="關於Copilot"><a href="#關於Copilot" class="headerlink" title="關於Copilot"></a>關於Copilot</h2><p>先來聊聊Copilot好了，這一兩天使用下來我覺得Copilot根本是神一般的發明，我只能說超級好用，他不只可以幫我寫程式還可以幫我寫文件跟文章，你現在看到的這篇文章就是在Copilot的輔助下完成的。Copilot會在你輸入幾個字之後自動給出他覺得你接下來會想輸入的內容，給出的內容基本上跟我想寫的八九不離十了，還能幫你通順文句。不過使用完也很清楚一點，他根本沒辦法取代工程師，他只是一個輔助工具，他只能幫你寫一些重複性的東西，或是給你一個寫作方向；他也沒辦法很精準的寫出完全跟你所想的相同的內容，多數時候我還是要手動去修改並對他給出的內容做取捨。</p>
<h2 id="關於AI繪圖"><a href="#關於AI繪圖" class="headerlink" title="關於AI繪圖"></a>關於AI繪圖</h2><p>聊完Copilot再來聊聊本篇重點AI繪圖，先說明我自己其實沒有用過AI繪圖，不過倒是有不少朋友有用，也有親眼看他們操作給我看。加上我認為自己關注了不少繪師，也有朋友是繪師，所以我是綜合他們的說法加上我自己的看法來討論的。</p>
<p>許多人使用的都是<a href="https://novelai.net/">Novel AI</a>裡的付費AI繪圖工具，操作方式就是下關鍵字並讓AI透過關鍵字去生成圖片，又或者是餵一些現有的圖片給AI去生成新圖，經過幾次不斷的修改，最後就可以得到一張不錯的圖片，有些圖片在我看來是真的神，我想一般人可能無法分辨是不是AI繪製的。這也是根本上造成這次話題的原因：如果AI繪圖這麼神繪師是不是要沒飯吃了！？這答案跟我對Copilot的看法一樣，不會，因為他根本上只能算是輔助工具，多看幾張就知道很多部分他還是沒辦法完美達到我們想要的結果，很多時候還是需要人工改圖，這跟Copilot的情況很相似，以及他也是有一些弱點，例如他的弱項是手部繪製，手都畫得奇形怪狀，又或者是風格很統一幾乎清一色都是日系畫風又很容易畫出大奶妹子，我想這也跟當初餵進去訓練模型的資料有關；加上每位繪師都有自己獨特的風格，以上都是目前AI無法取代的，就算有些成功案例又如何，他還是有很多地方無法達成們人類的需求，但作為不會繪畫的人來說AI繪圖算是一大福音吧，跟委託一位昂貴的繪師相比這個可能便宜些。</p>
<p>至於為什麼說他是輔助工具？許多繪師都說他的光影、服裝設計都是非常好的參考對象，這也跟我對Copilot的看法相同，他所給我的建議是個方向，但基本上我沒辦法照抄，因為那就不完全是我要的。</p>
<p>除了取代繪師的部分有不少討論度，真正討論最兇的其實是餵進去的資料的版權問題，不過我這篇想著重在AI本身而不是智財權，所以不會有任何相關討論請見諒。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>綜上所述，我認為AI繪圖跟Copilot都是輔助工具，他們的存在並不會讓繪師或工程師失業，他們只能讓我們更快更好的完成工作罷了。比較有趣的點是AI繪圖討論度大於Copilot，或許是工程師們比較了解AI的原理也說不定？我自己是認為AI要成長到能完全取代還要好長一段時間，一來是AI這東西本質上就是大量機率與統計學的應用，這些東西都只能無限接近答案，無法得到完完全全一模一樣的成果，現階段很多部分都還是有待加強，或許有天他能夠無限接近到我們幾乎分辨不出來，但他們終究是不相同的東西，本質來說就不同了，不過這部分討論比較哲學一點，就不多贅述了；二來是說不准以後又會出現有別於AI的技術而將它比下去也說不定。以上就是我的淺談，只是記錄下最近遇到這兩個相似討論度又高的東西以及我產生的小小心得，個人淺見。</p>
]]></content>
      <tags>
        <tag>other, copilot, AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Hidden Markov Model implement in python</title>
    <url>/2022/10/16/Hidden-Markov-Model-implement-in-python/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為HEXO不支援Latex語法，所以我把文章放在<a href="https://hackmd.io/@XibGbVrGSw6szTtbuQpNBw/HJdmQtqmj">Hackmd</a>上，請移動至Hackmd觀看。</p>
<h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a><a href="https://github.com/huanginch/HMM">Source code</a></h2><p>如果你不想看那麼多字想直接看程式碼，可以直接點上面的連結，程式碼都有註解，應該不難懂。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>bioinformatics</tag>
        <tag>algorithmn</tag>
        <tag>hidden-markov-model</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AOS套件後出現X軸</title>
    <url>/2022/12/19/x-axis-after-using-aos/</url>
    <content><![CDATA[<p><a href="https://michalsnik.github.io/aos/">AOS (Animation-on-Scroll)</a>套件是一個在網頁開發上很常使用的動畫套件，不過在使用到「<strong>fade-left</strong>」與「<strong>fade-right</strong>」時很常會發生網頁出現x軸的情形。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="aos-overflow" src="https://codepen.io/intHuang/embed/rNrNyXW?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/intHuang/pen/rNrNyXW">
  aos-overflow</a> by int (<a href="https://codepen.io/intHuang">@intHuang</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>以上面的例子來說，在我頁面滾動到灰色區塊前都會有一個x軸存在，而造成這個原因正是「<strong>fade-left</strong>」與「<strong>fade-right</strong>」這兩個效果並用所導致；因為這兩個效果是利區塊位置改變(從負軸到正軸的位移)，所以就會產生x軸。(此情況也會發生在自己寫的animation-on-scroll上，道理是相同的。)</p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>知道原因之後要解決這件事其實很簡單，產生x軸的原因是元素超出畫面，那個幫他上個overflow-hidden把超出去的元素藏起來就好了。</p>
<p>為了一勞永逸，直接在body上面加上<code>overflow-x: hidden;</code>的style就可以了。</p>
<h2 id="地雷"><a href="#地雷" class="headerlink" title="地雷"></a>地雷</h2><p>但這邊還有個小小地雷，在做RWD時你會發現手機版的<code>overflow-x: hidden;</code>上不去，這是因為手機版瀏覽器會自己加上<code>overflow: auto;</code>還是加在inline-style上，根本概不掉，所以這時候要用一個div把你的整個網頁包起來，<code>overflow-x: hidden</code>就寫在上面。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這個問題困擾我好久了，害我一直沒辦法做左右淡入的動畫，還好有找到解決方法，希望這篇文章可以幫助跟我遇到相同問題的人。</p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frontend</tag>
        <tag>aos</tag>
      </tags>
  </entry>
</search>
